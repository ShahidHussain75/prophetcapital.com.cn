function detect_os(){var n="Unknown OS";return-1!=navigator.appVersion.indexOf("Win")&&(n="Windows"),-1!=navigator.appVersion.indexOf("Mac")&&(n="MacOS"),-1!=navigator.appVersion.indexOf("X11")&&(n="UNIX"),-1!=navigator.appVersion.indexOf("Linux")&&(n="Linux"),n}function find_in_array_of_objects(n,r,e){var i=!1;return jQuery.each(n,function(n,t){t.hasOwnProperty(r)&&t[r]==e&&(i=!0)}),i}function hex_to_rgb(n){n=parseInt(n,16);var r=n>>16,e=n>>8&255,i=255&n;return[r,e,i]}var $=jQuery;String.prototype.replace_all=function(n,r){return this.replace(new RegExp(n,"g"),r)},$.fn.isVisible=function(n){var r=$("undefined"!==n?n:window),e=r.scrollTop(),i=$(this).height();return i>=e},String.prototype.endsWith=function(n){return-1!==this.indexOf(n,this.length-n.length)};var calc_size=function(n){if(n.endsWith("%")||n.endsWith("px"))return n;var r=n.replace("/[^0-9]/","");return r+"px"};
!function(t){"use strict";var a=detect_os();"MacOS"==a&&t("html").addClass("mac"),t(function(){var a;t('[data-action="add-model"]').on("keypress",function(t){return 13!=t.keyCode}),t('input[data-action="add-model"]').on("keyup",function(a){var e=t(this),n=t(this).parents(".panel-footer").find(".a-spinner"),o=t(this).parent("form"),i=t(this).attr("data-model");13==a.keyCode&&(n.show(),t.ajax({url:ajaxurl,type:"post",data:{action:"update_or_new_"+i,data:{data:{name:o.find("input").val()},model:i}},success:function(){e.val(""),setTimeout(function(){window.location.reload()},500)}}))}),t("#action-settings").on("click",function(){var t={html:"#settings-wrap",width:"100%"};a=new AwesomePanel(t),a.init()}),t('[data-action="modal"]').lightbox({minWidth:50,minHeight:100,labels:{close:'<svg viewBox="0 0 56 56"><use xlink:href="#icon-delete"></use></svg>'}});var e={container:"#action-add-buttons",content:"#action-add-buttons-tooltip",width:180,data:{}},n=new AwesomeTooltip(e);n.init();var o=new AwesomeAjax;o.get_templates()})}(jQuery);
!function(e){"function"==typeof define&&define.amd?define(["underscore","backbone","exports"],e):"object"==typeof exports?e(require("underscore"),require("backbone"),exports):e(_,Backbone,{})}(function(e,t,i){t.Stickit=i,i._handlers=[],i.addHandler=function(t){t=e.map(e.flatten([t]),function(t){return e.defaults({},t,{updateModel:!0,updateView:!0,updateMethod:"text"})}),this._handlers=this._handlers.concat(t)},i.ViewMixin={_modelBindings:null,unstickit:function(t,i){if(e.isObject(i))return void e.each(i,function(e,i){this.unstickit(t,i)},this);var n=[],a=[];this._modelBindings=e.reject(this._modelBindings,function(e){return t&&e.model!==t||i&&e.config.selector!=i?void 0:(e.model.off(e.event,e.fn),a.push(e.config._destroy),n.push(e.model),!0)}),e.invoke(e.uniq(n),"trigger","stickit:unstuck",this.cid),e.each(e.uniq(a),function(e){e.call(this)},this),this.$el.off(".stickit"+(t?"."+t.cid:""),i)},stickit:function(t,i){var n=t||this.model,a=i||e.result(this,"bindings")||{};this._modelBindings||(this._modelBindings=[]),this.addBinding(n,a);var o=this.remove;return o.stickitWrapped||(this.remove=function(){var e=this;return this.unstickit(),o&&(e=o.apply(this,arguments)),e}),this.remove.stickitWrapped=!0,this},addBinding:function(t,i,a){var v=t||this.model,g=".stickit."+v.cid;if(a=a||{},e.isObject(i)){var b=i;return void e.each(b,function(e,t){this.addBinding(v,t,e)},this)}var k=":el"===i?this.$el:this.$(i);if(this.unstickit(v,i),k.length){e.isString(a)&&(a={observe:a}),e.isFunction(a.observe)&&(a.observe=a.observe.call(this));var m=u(k,a),_=m.observe;m.selector=i,m.view=this;var y=m.bindId=e.uniqueId(),w=e.extend({stickitChange:m},m.setOptions);if(m._destroy=function(){o.call(this,m.destroy,k,v,m)},d(k,m,v,_),h(k,m,v,_),f(k,m,v,_),_){e.each(m.events,function(t){var a=t+g,s=function(e){var t=o.call(this,m.getVal,k,e,m,n.call(arguments,1)),i=r(m.updateModel,t,e,m);i&&c(v,_,t,w,m)},l=":el"===i?"":i;this.$el.on(a,l,e.bind(s,this))},this),e.each(e.flatten([_]),function(e){s(v,"change:"+e,m,function(e,t,i){var n=i&&i.stickitChange&&i.stickitChange.bindId;if(n!==y){var a=l(v,_,m);p(k,m,a,v)}})});var V=l(v,_,m);p(k,m,V,v,!0)}o.call(this,m.initialize,k,v,m)}}},e.extend(t.View.prototype,i.ViewMixin);var n=[].slice,a=function(t,i){var n=(i||"").split("."),a=e.reduce(n,function(e,t){return e[t]},t);return null==a?t:a},o=function(t){return t=e.isString(t)?a(this,t):t,t?t.apply(this,n.call(arguments,1)):void 0},r=function(t,i,n){if(e.isBoolean(t))return t;if(e.isFunction(t)||e.isString(t)){var a=e.last(arguments).view;return o.apply(a,arguments)}return!1},s=function(e,t,i,n){var a=i.view;e.on(t,n,a),a._modelBindings.push({model:e,event:t,fn:n,config:i})},c=function(t,i,n,a,r){var s={},c=r.view;r.onSet&&(n=o.call(c,r.onSet,n,r)),r.set?o.call(c,r.set,i,n,a,r):(s[i]=n,e.isArray(i)&&e.isArray(n)&&(s=e.reduce(i,function(t,i,a){return t[i]=e.has(n,a)?n[a]:null,t},{})),t.set(s,a))},l=function(t,i,n){var a=n.view,r=function(e){return t[n.escape?"escape":"get"](e)},s=function(e){return null==e?"":e},c=e.isArray(i)?e.map(i,r):r(i);return n.onGet&&(c=o.call(a,n.onGet,c,n)),e.isArray(c)?e.map(c,s):s(c)},u=i.getConfiguration=function(t,n){var a=[{updateModel:!1,updateMethod:"text",update:function(e,t,i,n){e[n.updateMethod]&&e[n.updateMethod](t)},getVal:function(e,t,i){return e[i.updateMethod]()}}];a=a.concat(e.filter(i._handlers,function(e){return t.is(e.selector)})),a.push(n);var o=e.extend.apply(e,a);return e.has(o,"updateView")||(o.updateView=!o.visible),o},d=function(t,i,n,a){var o=["autofocus","autoplay","async","checked","controls","defer","disabled","hidden","indeterminate","loop","multiple","open","readonly","required","scoped","selected"],r=i.view;e.each(i.attributes||[],function(c){c=e.clone(c),c.view=r;var u="",d=c.observe||(c.observe=a),f=function(){var i=e.contains(o,c.name)?"prop":"attr",a=l(n,d,c);"class"===c.name?(t.removeClass(u).addClass(a),u=a):t[i](c.name,a)};e.each(e.flatten([d]),function(e){s(n,"change:"+e,i,f)}),f()})},f=function(t,i,n,a){e.each(i.classes||[],function(a,o){e.isString(a)&&(a={observe:a}),a.view=i.view;var r=a.observe,c=function(){var e=l(n,r,a);t.toggleClass(o,!!e)};e.each(e.flatten([r]),function(e){s(n,"change:"+e,i,c)}),c()})},h=function(t,i,n,a){if(null!=i.visible){var r=i.view,c=function(){var s=i.visible,c=i.visibleFn,u=l(n,a,i),d=!!u;(e.isFunction(s)||e.isString(s))&&(d=!!o.call(r,s,u,i)),c?o.call(r,c,t,d,i):t.toggle(d)};e.each(e.flatten([a]),function(e){s(n,"change:"+e,i,c)}),c()}},p=function(e,t,i,n,a){var s=t.view;r(t.updateView,i,t)&&(o.call(s,t.update,e,i,n,t),a||o.call(s,t.afterUpdate,e,i,t))};return i.addHandler([{selector:"[contenteditable]",updateMethod:"html",events:["input","change"]},{selector:"input",events:["propertychange","input","change"],update:function(e,t){e.val(t)},getVal:function(e){return e.val()}},{selector:"textarea",events:["propertychange","input","change"],update:function(e,t){e.val(t)},getVal:function(e){return e.val()}},{selector:'input[type="radio"]',events:["change"],update:function(e,t){e.filter('[value="'+t+'"]').prop("checked",!0)},getVal:function(e){return e.filter(":checked").val()}},{selector:'input[type="checkbox"]',events:["change"],update:function(i,n,a,o){if(i.length>1)n||(n=[]),i.each(function(i,a){var o=t.$(a),r=o.val(),s=e.some(n,function(e){return""+e===r});o.prop("checked",s)});else{var r=e.isBoolean(n)?n:""+n===i.val();i.prop("checked",r)}},getVal:function(i){var n;if(i.length>1)n=e.reduce(i,function(e,i){var n=t.$(i);return n.prop("checked")&&e.push(n.val()),e},[]);else{n=i.prop("checked");var a=i.val();"on"!==a&&null!=a&&(n=n?i.val():null)}return n}},{selector:"select",events:["change"],update:function(i,n,r,s){var c,u=s.selectOptions,d=u&&u.collection||void 0,f=i.prop("multiple");if(!u){u={};var h=function(e){return e.map(function(e,i){var n=t.$(i).data("stickit-bind-val");return{value:void 0!==n?n:i.value,label:i.text}}).get()};i.find("optgroup").length?(d={opt_labels:[]},i.find("> option").length&&(d.opt_labels.push(void 0),e.each(i.find("> option"),function(e){d[void 0]=h(t.$(e))})),e.each(i.find("optgroup"),function(e){var i=t.$(e).attr("label");d.opt_labels.push(i),d[i]=h(t.$(e).find("option"))})):d=h(i.find("option"))}u.valuePath=u.valuePath||"value",u.labelPath=u.labelPath||"label",u.disabledPath=u.disabledPath||"disabled";var p=function(i,n,o){e.each(i,function(i){var r,s,c,l=t.$("<option/>"),d=i,h=function(t,i,n){l.text(t),d=i,l.data("stickit-bind-val",d),e.isArray(d)||e.isObject(d)||l.val(d),n===!0&&l.prop("disabled","disabled")};"__default__"===i?(r=o.label,s=o.value,c=o.disabled):(r=a(i,u.labelPath),s=a(i,u.valuePath),c=a(i,u.disabledPath)),h(r,s,c);var p=function(){return f||null==d||null==o||d!==o?e.isObject(o)&&e.isEqual(d,o)?!0:!1:!0};p()?l.prop("selected",!0):f&&e.isArray(o)&&e.each(o,function(t){e.isObject(t)&&(t=a(t,u.valuePath)),(t===d||e.isObject(t)&&e.isEqual(d,t))&&l.prop("selected",!0)}),n.append(l)})};if(i.find("*").remove(),e.isString(d)){var v=window;0===d.indexOf("this.")&&(v=this),d=d.replace(/^[a-z]*\.(.+)$/,"$1"),c=a(v,d)}else c=e.isFunction(d)?o.call(this,d,i,s):d;if(c instanceof t.Collection){var g=c,b=function(){var e=l(r,s.observe,s);o.call(this,s.update,i,e,r,s)},k=function(){g.off("add remove reset sort",b)},m=function(){k(),g.off("stickit:selectRefresh"),g.off("stickit:selectRefreshForView"),r.off("stickit:selectRefresh")};g.trigger("stickit:selectRefreshForView",this.cid),g.once("stickit:selectRefreshForView",function(e){this.cid==e&&g.trigger("stickit:selectRefresh")},this),g.once("stickit:selectRefresh",k,this),g.on("add remove reset sort",b,this),r.trigger("stickit:selectRefresh"),r.once("stickit:selectRefresh",function(){r.off("stickit:unstuck",m)}),r.once("stickit:unstuck",m,this),c=c.toJSON()}if(u.defaultOption){var _=e.isFunction(u.defaultOption)?u.defaultOption.call(this,i,s):u.defaultOption;p(["__default__"],i,_)}if(e.isArray(c))p(c,i,n);else if(c.opt_labels)e.each(c.opt_labels,function(e){var a=t.$("<optgroup/>").attr("label",e);p(c[e],a,n),i.append(a)});else{var y,w=[];for(var V in c)y={},y[u.valuePath]=V,y[u.labelPath]=c[V],w.push(y);w=e.sortBy(w,u.comparator||u.labelPath),p(w,i,n)}},getVal:function(i){var n=i.find("option:selected");return i.prop("multiple")?e.map(n,function(e){return t.$(e).data("stickit-bind-val")}):n.data("stickit-bind-val")}}]),i});
!function(e,t){"undefined"!=typeof exports?module.exports=t(require("jquery"),require("underscore"),require("backbone")):"function"==typeof define&&define.amd?define(["jquery","underscore","backbone"],t):t(e.$,e._,e.Backbone)}(this,function(e,t,r){"use strict";var i,n=[];return r.NestedModel=r.Model.extend({get:function(e){return r.NestedModel.walkThenGet(this.attributes,e)},previous:function(e){return r.NestedModel.walkThenGet(this._previousAttributes,e)},has:function(e){var r=this.get(e);return!(null===r||t.isUndefined(r))},set:function(e,n,s){var a,d,l,h=r.NestedModel.deepClone(this.attributes);if(t.isString(e)?a=r.NestedModel.attrPath(e):t.isArray(e)&&(a=e),a)s=s||{},this._setAttr(h,a,n,s);else{s=n||{};var u=e;for(var o in u)u.hasOwnProperty(o)&&this._setAttr(h,r.NestedModel.attrPath(o),s.unset?void 0:u[o],s)}return i=r.NestedModel.__super__.changedAttributes.call(this),s.unset&&a&&1===a.length?(d={},d[e]=void 0,i=t.omit(i,t.keys(d)),l=r.NestedModel.__super__.set.call(this,d,s)):(d=h,s.unset&&a?(s=t.extend({},s),delete s.unset):s.unset&&t.isObject(e)&&(d=e),i=t.omit(i,t.keys(d)),l=r.NestedModel.__super__.set.call(this,d,s)),l?(this._runDelayedTriggers(),this):(this.changed={},i={},!1)},unset:function(e,r){return this.set(e,void 0,t.extend({},r,{unset:!0}))},clear:function(e){i={},e=e||{};var r=t.clone(this.attributes);if(!e.silent&&this.validate&&!this.validate(r,e))return!1;var n=this.changed={},s=this,a=function(e,r,i){t.each(e,function(d,l){var h=r;t.isArray(e)?h+="["+l+"]":r?h+="."+l:h=l,d=e[l],t.isObject(d)&&a(d,h,i),i.silent||s._delayedChange(h,null,i),n[h]=null})};return a(this.attributes,"",e),this.attributes={},e.silent||this._delayedTrigger("change"),this._runDelayedTriggers(),this},add:function(e,r,i){var n=this.get(e);if(!t.isArray(n))throw new Error("current value is not an array");return this.set(e+"["+n.length+"]",r,i)},remove:function(e,i){i=i||{};var n=r.NestedModel.attrPath(e),s=t.initial(n),a=this.get(s),d=t.last(n);if(!t.isArray(a))throw new Error("remove() must be called on a nested array");var l=!i.silent&&a.length>=d+1,h=a[d];if(a.splice(d,1),i.silent=!0,this.set(s,a,i),l){e=r.NestedModel.createAttrStr(s),this.trigger("remove:"+e,this,h);for(var u=s.length;u>=1;u--)e=r.NestedModel.createAttrStr(t.first(s,u)),this.trigger("change:"+e,this,h);this.trigger("change",this,h)}return this},changedAttributes:function(e){var n=r.NestedModel.__super__.changedAttributes.call(this,e);return t.isObject(n)?t.extend({},i,n):!1},toJSON:function(){return r.NestedModel.deepClone(this.attributes)},_delayedTrigger:function(){n.push(arguments)},_delayedChange:function(e,t,r){this._delayedTrigger("change:"+e,this,t,r),this.changed||(this.changed={}),this.changed[e]=t},_runDelayedTriggers:function(){for(;n.length>0;)this.trigger.apply(this,n.shift())},_setAttr:function(e,i,n,s){s=s||{};var a=i.length,d=this;r.NestedModel.walkPath(e,i,function(e,l,h){var u=t.last(l),o=r.NestedModel.createAttrStr(l),c=!t.isEqual(e[u],n);if(l.length===a){if(s.unset){if(delete e[u],t.isArray(e)){var g=r.NestedModel.createAttrStr(t.initial(i));d._delayedTrigger("remove:"+g,d,e[u])}}else e[u]=n;if(!s.silent&&t.isObject(n)&&c){var f=[],v=function(e,r){if(!(t.indexOf(f,e)>-1)){f.push(e);var i,n;for(var a in e)e.hasOwnProperty(a)&&(i=r+"."+a,n=e[a],t.isEqual(d.get(i),n)||d._delayedChange(i,n,s),t.isObject(n)&&v(n,i))}};v(n,o)}}else e[u]||(t.isNumber(h)?e[u]=[]:e[u]={});s.silent||(l.length>1&&c&&d._delayedChange(o,e[u],s),t.isArray(e[u])&&d._delayedTrigger("add:"+o,d,e[u]))})}},{attrPath:function(e){var r;return t.isString(e)?(r=""===e?[""]:e.match(/[^\.\[\]]+/g),r=t.map(r,function(e){return e.match(/^\d+$/)?parseInt(e,10):e})):r=e,r},createAttrStr:function(e){var r=e[0];return t.each(t.rest(e),function(e){r+=t.isNumber(e)?"["+e+"]":"."+e}),r},deepClone:function(t){return e.extend(!0,{},t)},walkPath:function(e,t,r,i){for(var n,s=e,a=0;a<t.length&&(r.call(i||this,s,t.slice(0,a+1),t[a+1]),n=t[a],s=s[n],s);a++);},walkThenGet:function(e,i){var n,s=r.NestedModel.attrPath(i);return r.NestedModel.walkPath(e,s,function(e,r){var i=t.last(r);r.length===s.length&&(n=e[i])}),n}}),r});
var Formstone=this.Formstone=function(t,e,n){"use strict";function s(t){d.Plugins[t].initialized||(d.Plugins[t].methods._setup.call(n),d.Plugins[t].initialized=!0)}function i(t,e,n,s){var i,r={raw:{}};s=s||{};for(i in s)s.hasOwnProperty(i)&&("classes"===t?(r.raw[s[i]]=e+"-"+s[i],r[s[i]]="."+e+"-"+s[i]):(r.raw[i]=s[i],r[i]=s[i]+"."+e));for(i in n)n.hasOwnProperty(i)&&("classes"===t?(r.raw[i]=n[i].replace(/{ns}/g,e),r[i]=n[i].replace(/{ns}/g,"."+e)):(r.raw[i]=n[i].replace(/.{ns}/g,""),r[i]=n[i].replace(/{ns}/g,e)));return r}function r(){var t,e={transition:"transitionend",MozTransition:"transitionend",OTransition:"otransitionend",WebkitTransition:"webkitTransitionEnd"},s=["transition","-webkit-transition"],i={transform:"transform",MozTransform:"-moz-transform",OTransform:"-o-transform",msTransform:"-ms-transform",webkitTransform:"-webkit-transform"},r="transitionend",o="",a="",c=n.createElement("div");for(t in e)if(e.hasOwnProperty(t)&&t in c.style){r=e[t],d.support.transition=!0;break}p.transitionEnd=r+".{ns}";for(t in s)if(s.hasOwnProperty(t)&&s[t]in c.style){o=s[t];break}d.transition=o;for(t in i)if(i.hasOwnProperty(t)&&i[t]in c.style){d.support.transform=!0,a=i[t];break}d.transform=a}function o(){d.windowWidth=d.$window.width(),d.windowHeight=d.$window.height(),m=l.startTimer(m,g,a)}function a(){for(var t in d.ResizeHandlers)d.ResizeHandlers.hasOwnProperty(t)&&d.ResizeHandlers[t].callback.call(e,d.windowWidth,d.windowHeight)}function c(t,e){return parseInt(t.priority)-parseInt(e.priority)}var u=function(){this.Version="0.7.0",this.Plugins={},this.DontConflict=!1,this.Conflicts={fn:{}},this.ResizeHandlers=[],this.window=e,this.$window=t(e),this.document=n,this.$document=t(n),this.$body=null,this.windowWidth=0,this.windowHeight=0,this.userAgent=e.navigator.userAgent||e.navigator.vendor||e.opera,this.isFirefox=/Firefox/i.test(this.userAgent),this.isChrome=/Chrome/i.test(this.userAgent),this.isSafari=/Safari/i.test(this.userAgent)&&!this.isChrome,this.isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(this.userAgent),this.isFirefoxMobile=this.isFirefox&&this.isMobile,this.transform=null,this.transition=null,this.support={file:!!(e.File&&e.FileList&&e.FileReader),history:!!(e.history&&e.history.pushState&&e.history.replaceState),matchMedia:!(!e.matchMedia&&!e.msMatchMedia),raf:!(!e.requestAnimationFrame||!e.cancelAnimationFrame),touch:!!("ontouchstart"in e||e.DocumentTouch&&n instanceof e.DocumentTouch),transition:!1,transform:!1}},l={killEvent:function(t,e){try{t.preventDefault(),t.stopPropagation(),e&&t.stopImmediatePropagation()}catch(n){}},startTimer:function(t,e,n,s){return l.clearTimer(t),s?setInterval(n,e):setTimeout(n,e)},clearTimer:function(t,e){t&&(e?clearInterval(t):clearTimeout(t),t=null)},sortAsc:function(t,e){return parseInt(e)-parseInt(t)},sortDesc:function(t,e){return parseInt(e)-parseInt(t)}},d=new u,f=t.Deferred(),h={base:"{ns}",element:"{ns}-element"},p={namespace:".{ns}",blur:"blur.{ns}",change:"change.{ns}",click:"click.{ns}",dblClick:"dblclick.{ns}",drag:"drag.{ns}",dragEnd:"dragend.{ns}",dragEnter:"dragenter.{ns}",dragLeave:"dragleave.{ns}",dragOver:"dragover.{ns}",dragStart:"dragstart.{ns}",drop:"drop.{ns}",error:"error.{ns}",focus:"focus.{ns}",focusIn:"focusin.{ns}",focusOut:"focusout.{ns}",input:"input.{ns}",keyDown:"keydown.{ns}",keyPress:"keypress.{ns}",keyUp:"keyup.{ns}",load:"load.{ns}",mouseDown:"mousedown.{ns}",mouseEnter:"mouseenter.{ns}",mouseLeave:"mouseleave.{ns}",mouseMove:"mousemove.{ns}",mouseOut:"mouseout.{ns}",mouseOver:"mouseover.{ns}",mouseUp:"mouseup.{ns}",resize:"resize.{ns}",scroll:"scroll.{ns}",select:"select.{ns}",touchCancel:"touchcancel.{ns}",touchEnd:"touchend.{ns}",touchLeave:"touchleave.{ns}",touchMove:"touchmove.{ns}",touchStart:"touchstart.{ns}"};u.prototype.NoConflict=function(){d.DontConflict=!0;for(var e in d.Plugins)d.Plugins.hasOwnProperty(e)&&(t[e]=d.Conflicts[e],t.fn[e]=d.Conflicts.fn[e])},u.prototype.Plugin=function(n,r){return d.Plugins[n]=function(n,s){function r(e){var i="object"===t.type(e);e=t.extend(!0,{},s.defaults||{},i?e:{});for(var r=this,o=0,c=r.length;c>o;o++){var u=r.eq(o);if(!a(u)){var l="__"+s.guid++,d=s.classes.raw.base+l,f=u.data(n+"-options"),h=t.extend(!0,{$el:u,guid:l,rawGuid:d,dotGuid:"."+d},e,"object"===t.type(f)?f:{});u.addClass(s.classes.raw.element).data(w,h),s.methods._construct.apply(u,[h].concat(Array.prototype.slice.call(arguments,i?1:0)))}}return r}function o(){s.functions.iterate.apply(this,[s.methods._destruct].concat(Array.prototype.slice.call(arguments,1))),this.removeClass(s.classes.raw.element).removeData(w)}function a(t){return t.data(w)}function u(e){if(this instanceof t){var n=s.methods[e];return"object"!==t.type(e)&&e?n&&0!==e.indexOf("_")?s.functions.iterate.apply(this,[n].concat(Array.prototype.slice.call(arguments,1))):this:r.apply(this,arguments)}}function f(n){var i=s.utilities[n]||s.utilities._initialize||!1;return i?i.apply(e,Array.prototype.slice.call(arguments,"object"===t.type(n)?0:1)):void 0}function m(e){s.defaults=t.extend(!0,s.defaults,e||{})}function g(e){for(var n=this,s=0,i=n.length;i>s;s++){var r=n.eq(s),o=a(r)||{};"undefined"!==t.type(o.$el)&&e.apply(r,[o].concat(Array.prototype.slice.call(arguments,1)))}return n}var y="fs-"+n,w="fs"+n.replace(/(^|\s)([a-z])/g,function(t,e,n){return e+n.toUpperCase()});return s.initialized=!1,s.priority=s.priority||10,s.classes=i("classes",y,h,s.classes),s.events=i("events",n,p,s.events),s.functions=t.extend({getData:a,iterate:g},l,s.functions),s.methods=t.extend(!0,{_setup:t.noop,_construct:t.noop,_destruct:t.noop,_resize:!1,destroy:o},s.methods),s.utilities=t.extend(!0,{_initialize:!1,_delegate:!1,defaults:m},s.utilities),s.widget&&(d.Conflicts.fn[n]=t.fn[n],t.fn[w]=u,d.DontConflict||(t.fn[n]=t.fn[w])),d.Conflicts[n]=t[n],t[w]=s.utilities._delegate||f,d.DontConflict||(t[n]=t[w]),s.namespace=n,s.namespaceClean=w,s.guid=0,s.methods._resize&&(d.ResizeHandlers.push({namespace:n,priority:s.priority,callback:s.methods._resize}),d.ResizeHandlers.sort(c)),s}(n,r),f.then(function(){s(n)}),d.Plugins[n]};var m=null,g=20;return d.$window.on("resize.fs",o),o(),t(function(){d.$body=t("body"),f.resolve()}),p.clickTouchStart=p.click+" "+p.touchStart,r(),d}(jQuery,this,document);
!function(e,t){"use strict";function a(e){e.touches=[],e.touching=!1,this.on(X.dragStart,Y.killEvent),e.tap?(e.pan=!1,e.scale=!1,e.swipe=!1,t.support.touch?this.on([X.touchStart,X.pointerDown].join(" "),e,o):this.on(X.click,e,l)):(e.pan||e.swipe||e.scale)&&(e.tap=!1,e.swipe&&(e.pan=!0),e.scale&&(e.axis=!1),e.axis?(e.axisX="x"===e.axis,e.axisY="y"===e.axis):d(this,"none"),this.on([X.touchStart,X.pointerDown].join(" "),e,i),e.pan&&!t.support.touch&&this.on(X.mouseDown,e,o))}function n(){this.off(X.namespace),d(this,"")}function i(e){e.preventManipulation&&e.preventManipulation();var t=e.data,a=e.originalEvent;if(a.type.match(/(up|end)$/i))return void r(e);if(a.pointerId){var n=!1;for(var i in t.touches)t.touches[i].id===a.pointerId&&(n=!0,t.touches[i].pageX=a.clientX,t.touches[i].pageY=a.clientY);n||t.touches.push({id:a.pointerId,pageX:a.clientX,pageY:a.clientY})}else t.touches=a.touches;a.type.match(/(down|start)$/i)?o(e):a.type.match(/move$/i)&&s(e)}function o(t){var a=t.data,n="undefined"!==e.type(a.touches)?a.touches[0]:null;if(a.touching||(a.startE=t.originalEvent,a.startX=n?n.pageX:t.pageX,a.startY=n?n.pageY:t.pageY,a.startT=(new Date).getTime(),a.scaleD=1,a.passed=!1),a.tap)a.clicked=!1,a.$el.on([X.touchMove,X.pointerMove].join(" "),a,i).on([X.touchEnd,X.touchCancel,X.pointerUp,X.pointerCancel].join(" "),a,i);else if(a.pan||a.scale){a.$links&&a.$links.off(X.click);var o=u(a.scale?X.scaleStart:X.panStart,t,a.startX,a.startY,a.scaleD,0,0,"","");if(a.scale&&a.touches&&a.touches.length>=2){var p=a.touches;a.pinch={startX:h(p[0].pageX,p[1].pageX),startY:h(p[0].pageY,p[1].pageY),startD:g(p[1].pageX-p[0].pageX,p[1].pageY-p[0].pageY)},o.pageX=a.startX=a.pinch.startX,o.pageY=a.startY=a.pinch.startY}a.touching||(a.touching=!0,a.pan&&M.on(X.mouseMove,a,s).on(X.mouseUp,a,r),M.on([X.touchMove,X.touchEnd,X.touchCancel,X.pointerMove,X.pointerUp,X.pointerCancel].join(" "),a,i),a.$el.trigger(o))}}function s(t){var a=t.data,n="undefined"!==e.type(a.touches)?a.touches[0]:null,i=n?n.pageX:t.pageX,o=n?n.pageY:t.pageY,s=i-a.startX,p=o-a.startY,c=s>0?"right":"left",l=p>0?"down":"up",d=Math.abs(s)>E,f=Math.abs(p)>E;if(a.tap)(d||f)&&a.$el.off([X.touchMove,X.touchEnd,X.touchCancel,X.pointerMove,X.pointerUp,X.pointerCancel].join(" "));else if(a.pan||a.scale)if(!a.passed&&a.axis&&(a.axisX&&f||a.axisY&&d))r(t);else{!a.passed&&(!a.axis||a.axis&&a.axisX&&d||a.axisY&&f)&&(a.passed=!0),a.passed&&(Y.killEvent(t),Y.killEvent(a.startE));var v=!0,M=u(a.scale?X.scale:X.pan,t,i,o,a.scaleD,s,p,c,l);if(a.scale)if(a.touches&&a.touches.length>=2){var w=a.touches;a.pinch.endX=h(w[0].pageX,w[1].pageX),a.pinch.endY=h(w[0].pageY,w[1].pageY),a.pinch.endD=g(w[1].pageX-w[0].pageX,w[1].pageY-w[0].pageY),a.scaleD=a.pinch.endD/a.pinch.startD,M.pageX=a.pinch.endX,M.pageY=a.pinch.endY,M.scale=a.scaleD,M.deltaX=a.pinch.endX-a.pinch.startX,M.deltaY=a.pinch.endY-a.pinch.startY}else a.pan||(v=!1);v&&a.$el.trigger(M)}}function p(t,a){t.on(X.click,a,c);var n=e._data(t[0],"events").click;n.unshift(n.pop())}function c(e){Y.killEvent(e,!0),e.data.$links.off(X.click)}function r(t){var a=t.data;if(a.tap)a.$el.off([X.touchMove,X.touchEnd,X.touchCancel,X.pointerMove,X.pointerUp,X.pointerCancel,X.mouseMove,X.mouseUp].join(" ")),a.startE.preventDefault(),l(t);else if(a.pan||a.scale){var n="undefined"!==e.type(a.touches)?a.touches[0]:null,i=n?n.pageX:t.pageX,o=n?n.pageY:t.pageY,s=i-a.startX,c=o-a.startY,r=(new Date).getTime(),h=a.scale?X.scaleEnd:X.panEnd,g=s>0?"right":"left",d=c>0?"down":"up",f=Math.abs(s)>1,v=Math.abs(c)>1;if(a.swipe&&Math.abs(s)>E&&r-a.startT<w&&(h=X.swipe),a.axis&&(a.axisX&&v||a.axisY&&f)||f||v){a.$links=a.$el.find("a");for(var Y=0,k=a.$links.length;k>Y;Y++)p(a.$links.eq(Y),a)}var m=u(h,t,i,o,a.scaleD,s,c,g,d);M.off([X.touchMove,X.touchEnd,X.touchCancel,X.mouseMove,X.mouseUp,X.pointerMove,X.pointerUp,X.pointerCancel].join(" ")),a.$el.trigger(m),a.touches=[],a.scale}a.touching=!1}function l(e){Y.killEvent(e);var t=e.data;if(!t.clicked){"click"!==e.type&&(t.clicked=!0);var a=t.startE?t.startX:e.pageX,n=t.startE?t.startY:e.pageY,i=u(X.tap,e.originalEvent,a,n,1,0,0);t.$el.trigger(i)}}function u(t,a,n,i,o,s,p,c,r){return e.Event(t,{originalEvent:a,bubbles:!0,pageX:n,pageY:i,scale:o,deltaX:s,deltaY:p,directionX:c,directionY:r})}function h(e,t){return(e+t)/2}function g(e,t){return Math.sqrt(e*e+t*t)}function d(e,t){e.css({"-ms-touch-action":t,"touch-action":t})}var f=!t.window.PointerEvent,v=t.Plugin("touch",{widget:!0,defaults:{axis:!1,pan:!1,scale:!1,swipe:!1,tap:!1},methods:{_construct:a,_destruct:n},events:{pointerDown:f?"MSPointerDown":"pointerdown",pointerUp:f?"MSPointerUp":"pointerup",pointerMove:f?"MSPointerMove":"pointermove",pointerCancel:f?"MSPointerCancel":"pointercancel"}}),X=v.events,Y=v.functions,M=t.$window,E=10,w=50;X.tap="tap",X.pan="pan",X.panStart="panstart",X.panEnd="panend",X.scale="scale",X.scaleStart="scalestart",X.scaleEnd="scaleend",X.swipe="swipe"}(jQuery,Formstone);
!function(t,e){"use strict";function r(t,r){if(r){t.$target=this.find(t.target),t.$check=t.target?t.$target:this,t.callback=r,t.styles=s(t.$check),t.timer=null;var n=t.$check.css(e.transition+"-duration"),i=parseFloat(n);e.support.transition&&n&&i?this.on(u.transitionEnd,t,a):t.timer=p.startTimer(t.timer,50,function(){o(t)},!0)}}function n(t){p.clearTimer(t.timer,!0),this.off(u.namespace)}function a(e){e.stopPropagation(),e.preventDefault();var r=e.data,n=e.originalEvent,a=r.target?r.$target:r.$el;r.property&&n.propertyName!==r.property||!t(n.target).is(a)||i(r)}function i(t){t.always||t.$el[c.namespaceClean]("destroy"),t.callback.apply(t.$el)}function o(t){var e=s(t.$check);l(t.styles,e)||i(t),t.styles=e}function s(e){var r,n,a,i={};if(e instanceof t&&(e=e[0]),f.getComputedStyle){r=f.getComputedStyle(e,null);for(var o=0,s=r.length;s>o;o++)n=r[o],a=r.getPropertyValue(n),i[n]=a}else if(e.currentStyle){r=e.currentStyle;for(n in r)r[n]&&(i[n]=r[n])}return i}function l(e,r){if(t.type(e)!==t.type(r))return!1;for(var n in e)if(!e.hasOwnProperty(n)||!r.hasOwnProperty(n)||e[n]!==r[n])return!1;return!0}var c=e.Plugin("transition",{widget:!0,defaults:{always:!1,property:null,target:null},methods:{_construct:r,_destruct:n,resolve:i}}),u=c.events,p=c.functions,f=e.window}(jQuery,Formstone);
!function(e,t,o){"use strict";function i(){F=t.$body}function s(o){o.multiple=this.prop("multiple"),o.disabled=this.is(":disabled"),o.multiple?o.links=!1:o.external&&(o.links=!0);var i=this.find("[selected]").not(":disabled"),s=this.find(":selected").not(":disabled"),l=s.text(),n=this.find("option").index(s);o.multiple||""===o.label||i.length?o.label="":(s=this.prepend('<option value="" class="'+O.item_placeholder+'" selected>'+o.label+"</option>"),l=o.label,n=0);var d=this.find("option, optgroup"),a=d.filter("option");o.tabIndex=this[0].tabIndex,this[0].tabIndex=-1;var c=[O.base,o.customClass];o.mobile||t.isMobile?c.push(O.mobile):o.cover&&c.push(O.cover),o.multiple&&c.push(O.multiple),o.disabled&&c.push(O.disabled);var u='<div class="'+c.join(" ")+'" tabindex="'+o.tabIndex+'"></div>',f="";o.multiple||(f+='<button type="button" class="'+O.selected+'">',f+=e("<span></span>").text(y(l,o.trim)).html(),f+="</button>"),f+='<div class="'+O.options+'">',f+="</div>",this.wrap(u).after(f),o.$dropdown=this.parent(q.base),o.$allOptions=d,o.$options=a,o.$selected=o.$dropdown.find(q.selected),o.$wrapper=o.$dropdown.find(q.options),o.$placeholder=o.$dropdown.find(q.placeholder),o.index=-1,o.closed=!0,o.focused=!1,r(o),o.multiple||x(n,o),o.$selected.fsTouch({tap:!0}).on(T.tap,o,p),o.$dropdown.on(T.click,q.item,o,v).on(T.close,o,$),this.on(T.change,o,b),t.isMobile||(o.$dropdown.on(T.focusIn,o,h).on(T.focusOut,o,w),this.on(T.focusIn,o,function(e){e.data.$dropdown.trigger(T.raw.focusIn)}))}function l(e){e.$dropdown.hasClass(O.open)&&e.$selected.trigger(T.click),e.$el[0].tabIndex=e.tabIndex,e.$dropdown.off(T.namespace),e.$options.off(T.namespace),e.$placeholder.remove(),e.$selected.fsTouch("destroy").remove(),e.$wrapper.remove(),e.$el.off(T.namespace).show().unwrap()}function n(e,t){if("undefined"!=typeof t){var o=e.$items.index(e.$items.filter("[data-value="+t+"]"));e.$items.eq(o).addClass(O.item_disabled),e.$options.eq(o).prop("disabled",!0)}else e.$dropdown.hasClass(O.open)&&e.$selected.trigger(T.click),e.$dropdown.addClass(O.disabled),e.$el.prop("disabled",!0),e.disabled=!0}function d(e,t){if("undefined"!=typeof t){var o=e.$items.index(e.$items.filter("[data-value="+t+"]"));e.$items.eq(o).removeClass(O.item_disabled),e.$options.eq(o).prop("disabled",!1)}else e.$dropdown.removeClass(O.disabled),e.$el.prop("disabled",!1),e.disabled=!1}function a(e){var t=e.index;e.$allOptions=e.$el.find("option, optgroup"),e.$options=e.$allOptions.filter("option"),e.index=-1,t=e.$options.index(e.$options.filter(":selected")),r(e),e.multiple||x(t,e)}function r(t){for(var o="",i=0,s=0,l=t.$allOptions.length;l>s;s++){var n=t.$allOptions.eq(s),d=[];if("OPTGROUP"===n[0].tagName)d.push(O.group),n.is(":disabled")&&d.push(O.disabled),o+='<span class="'+d.join(" ")+'">'+n.attr("label")+"</span>";else{var a=n.val();n.attr("value")||n.attr("value",a),d.push(O.item),n.hasClass(O.item_placeholder)&&d.push(O.item_placeholder),n.is(":selected")&&d.push(O.item_selected),n.is(":disabled")&&d.push(O.item_disabled),o+='<button type="button" class="'+d.join(" ")+'" ',o+='data-value="'+a+'">',o+=e("<span></span>").text(y(n.text(),t.trim)).html(),o+="</button>",i++}}t.$items=t.$wrapper.html(o).find(q.item)}function p(e){M.killEvent(e);var o=e.data;if(!o.disabled)if(o.mobile||!t.isMobile||t.isFirefoxMobile)o.closed?u(o):f(o);else{var i=o.$el[0];if(G.createEvent){var s=G.createEvent("MouseEvents");s.initMouseEvent("mousedown",!1,!0,j,0,0,0,0,0,!1,!1,!1,!1,0,null),i.dispatchEvent(s)}else i.fireEvent&&i.fireEvent("onmousedown")}c(o)}function c(t){e(q.base).not(t.$dropdown).trigger(T.close,[t])}function u(e){if(e.closed){var t=e.$dropdown.offset(),o=F.outerHeight(),i=e.$wrapper.outerHeight(!0);e.index>=0?e.$items.eq(e.index).position():{left:0,top:0};t.top+i>o&&e.$dropdown.addClass(O.bottom),F.on(T.click+e.dotGuid,":not("+q.options+")",e,m),e.$dropdown.trigger(T.focusIn),e.$dropdown.addClass(O.open),C(e),e.closed=!1}}function f(e){e&&!e.closed&&(F.off(T.click+e.dotGuid),e.$dropdown.removeClass([O.open,O.bottom].join(" ")),e.closed=!0)}function m(t){M.killEvent(t);var o=t.data;o&&0===e(t.currentTarget).parents(q.base).length&&(f(o),o.$dropdown.trigger(T.focusOut))}function $(e){var t=e.data;t&&(f(t),t.$dropdown.trigger(T.focusOut))}function v(t){M.killEvent(t);var o=e(this),i=t.data;if(!i.disabled){if(i.$wrapper.is(":visible")){var s=i.$items.index(o);s!==i.index&&(x(s,i),k(i))}i.multiple||f(i),i.$dropdown.trigger(T.focusIn)}}function b(t,o){var i=e(this),s=t.data;if(!o&&!s.multiple){var l=s.$options.index(s.$options.filter("[value='"+E(i.val())+"']"));x(l,s),k(s)}}function h(t){M.killEvent(t);var o=(e(t.currentTarget),t.data);o.disabled||o.multiple||o.focused||(c(o),o.focused=!0,o.$dropdown.addClass(O.focus).on(T.keyDown+o.dotGuid,o,g))}function w(t,o){M.killEvent(t);var i=(e(t.currentTarget),t.data);i.focused&&i.closed&&(i.focused=!1,i.$dropdown.removeClass(O.focus).off(T.keyDown+i.dotGuid),i.multiple||f(i))}function g(o){var i=o.data;if(13===o.keyCode)i.closed||(f(i),x(i.index,i)),k(i);else if(!(9===o.keyCode||o.metaKey||o.altKey||o.ctrlKey||o.shiftKey)){M.killEvent(o);var s=i.$items.length-1,l=i.index<0?0:i.index;if(e.inArray(o.keyCode,t.isFirefox?[38,40,37,39]:[38,40])>-1)l+=38===o.keyCode||t.isFirefox&&37===o.keyCode?-1:1,0>l&&(l=0),l>s&&(l=s);else{var n,d,a=String.fromCharCode(o.keyCode).toUpperCase();for(d=i.index+1;s>=d;d++)if(n=i.$options.eq(d).text().charAt(0).toUpperCase(),n===a){l=d;break}if(0>l||l===i.index)for(d=0;s>=d;d++)if(n=i.$options.eq(d).text().charAt(0).toUpperCase(),n===a){l=d;break}}l>=0&&(x(l,i),C(i))}}function x(e,t){var o=t.$items.eq(e),i=t.$options.eq(e),s=o.hasClass(O.item_selected),l=o.hasClass(O.item_disabled);if(!l)if(t.multiple)s?(i.prop("selected",null),o.removeClass(O.item_selected)):(i.prop("selected",!0),o.addClass(O.item_selected));else if(e>-1&&e<t.$items.length){var n=i.data("label")||o.html();t.$selected.html(n).removeClass(q.item_placeholder),t.$items.filter(q.item_selected).removeClass(O.item_selected),t.$el[0].selectedIndex=e,o.addClass(O.item_selected),t.index=e}else""!==t.label&&t.$selected.html(t.label)}function C(e){var t=e.$items.eq(e.index),o=e.index>=0&&!t.hasClass(O.item_placeholder)?t.position():{left:0,top:0},i=(e.$wrapper.outerHeight()-t.outerHeight())/2;e.$wrapper.scrollTop(e.$wrapper.scrollTop()+o.top-i)}function k(e){e.links?_(e):e.$el.trigger(T.raw.change,[!0])}function _(e){var t=e.$el.val();e.external?j.open(t):j.location.href=t}function y(e,t){return 0===t?e:e.length>t?e.substring(0,t)+"...":e}function E(e){return"string"==typeof e?e.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g,"\\$1"):e}var I=t.Plugin("dropdown",{widget:!0,defaults:{cover:!1,customClass:"",label:"",external:!1,links:!1,mobile:!1,trim:0},methods:{_setup:i,_construct:s,_destruct:l,disable:n,enable:d,update:a,open:u,close:f},classes:["cover","bottom","multiple","mobile","open","disabled","focus","selected","options","group","item","item_disabled","item_selected","item_placeholder"],events:{tap:"tap",close:"close"}}),q=I.classes,O=q.raw,T=I.events,M=I.functions,j=t.window,G=(t.$window,t.document),F=null}(jQuery,Formstone);
!function(t,i,e){"use strict";function o(){N=i.$body,D=t("html, body")}function a(){F&&d()}function n(t){this.on(A.click,t,l)}function r(){s(),this.off(A.namespace)}function g(i,e){i instanceof t&&l.apply(S,[{data:t.extend(!0,{},{$object:i},R,e||{})}])}function l(e){if(!F){var o=e.data,a=o.$el,n=o.$object,r=a&&a[0].href?a[0].href||"":"",g=a&&a[0].hash?a[0].hash||"":"",l=r.toLowerCase().split(".").pop().split(/\#|\?/),d=l[0],c=a?a.data(P+"-type"):"",h="image"===c||t.inArray(d,o.extensions)>-1||"data:image"===r.substr(0,10),m=L(r),w="url"===c||!h&&!m&&"http"===r.substr(0,4)&&!g,H="element"===c||!h&&!m&&!w&&"#"===g.substr(0,1),f="undefined"!=typeof n;if(H&&(r=g),!(h||m||w||H||f))return;if(B.killEvent(e),F=t.extend({},{visible:!1,gallery:{active:!1},isMobile:i.isMobile||o.mobile,isTouch:i.support.touch,isAnimating:!0,oldContentHeight:0,oldContentWidth:0},o),F.margin*=2,F.type=h?"image":m?"video":"element",h||m){var b=a.data(P+"-gallery");b&&(F.gallery.active=!0,F.gallery.id=b,F.gallery.$items=t("a[data-lightbox-gallery= "+F.gallery.id+"], a[rel= "+F.gallery.id+"]"),F.gallery.index=F.gallery.$items.index(F.$el),F.gallery.total=F.gallery.$items.length-1)}var W="";F.isMobile||(W+='<div class="'+[q.raw.overlay,F.customClass].join(" ")+'"></div>');var y=[q.raw.base,q.raw.loading,q.raw.animating,F.customClass];F.fixed&&y.push(q.raw.fixed),F.isMobile&&y.push(q.raw.mobile),F.isTouch&&y.push(q.raw.touch),w&&y.push(q.raw.iframed),(H||f)&&y.push(q.raw.inline),W+='<div class="'+y.join(" ")+'">',W+='<button type="button" class="'+q.raw.close+'">'+F.labels.close+"</button>",W+='<span class="'+q.raw.loading_icon+'"></span>',W+='<div class="'+q.raw.container+'">',W+='<div class="'+q.raw.content+'">',(h||m)&&(W+='<div class="'+q.raw.tools+'">',W+='<div class="'+q.raw.controls+'">',F.gallery.active&&(W+='<button type="button" class="'+[q.raw.control,q.raw.control_previous].join(" ")+'">'+F.labels.previous+"</button>",W+='<button type="button" class="'+[q.raw.control,q.raw.control_next].join(" ")+'">'+F.labels.next+"</button>"),F.isMobile&&F.isTouch&&(W+='<button type="button" class="'+[q.raw.caption_toggle].join(" ")+'">'+F.labels.captionClosed+"</button>"),W+="</div>",W+='<div class="'+q.raw.meta+'">',F.gallery.active&&(W+='<p class="'+q.raw.position+'"',F.gallery.total<1&&(W+=' style="display: none;"'),W+=">",W+='<span class="'+q.raw.position_current+'">'+(F.gallery.index+1)+"</span> ",W+=F.labels.count,W+=' <span class="'+q.raw.position_total+'">'+(F.gallery.total+1)+"</span>",W+="</p>"),W+='<div class="'+q.raw.caption+'">',W+=F.formatter.call(a,o),W+="</div></div>",W+="</div>"),W+="</div></div></div>",N.append(W),F.$overlay=t(q.overlay),F.$lightbox=t(q.base),F.$close=t(q.close),F.$container=t(q.container),F.$content=t(q.content),F.$tools=t(q.tools),F.$meta=t(q.meta),F.$position=t(q.position),F.$caption=t(q.caption),F.$controlBox=t(q.controls),F.$controls=t(q.control),F.isMobile?(F.paddingVertical=F.$close.outerHeight(),F.paddingHorizontal=0,F.mobilePaddingVertical=parseInt(F.$content.css("paddingTop"),10)+parseInt(F.$content.css("paddingBottom"),10),F.mobilePaddingHorizontal=parseInt(F.$content.css("paddingLeft"),10)+parseInt(F.$content.css("paddingRight"),10)):(F.paddingVertical=parseInt(F.$lightbox.css("paddingTop"),10)+parseInt(F.$lightbox.css("paddingBottom"),10),F.paddingHorizontal=parseInt(F.$lightbox.css("paddingLeft"),10)+parseInt(F.$lightbox.css("paddingRight"),10),F.mobilePaddingVertical=0,F.mobilePaddingHorizontal=0),F.contentHeight=F.$lightbox.outerHeight()-F.paddingVertical,F.contentWidth=F.$lightbox.outerWidth()-F.paddingHorizontal,F.controlHeight=F.$controls.outerHeight(),p(),F.gallery.active&&I(),K.on(A.keyDown,C),N.on(A.clickTouchStart,[q.overlay,q.close].join(", "),s),F.gallery.active&&F.$lightbox.on(A.clickTouchStart,q.control,x),F.isMobile&&F.isTouch&&F.$lightbox.on(A.clickTouchStart,q.caption_toggle,u),F.$lightbox.fsTransition({property:"opacity"},function(){h?v(r):m?$(r):w?V(r):H?M(r):f&&_(F.$object)}).addClass(q.raw.open),F.$overlay.addClass(q.raw.open)}}function d(t){"object"!=typeof t&&(F.targetHeight=arguments[0],F.targetWidth=arguments[1]),"element"===F.type?T(F.$content.find("> :first-child")):"image"===F.type?f():"video"===F.type&&W(),h()}function s(t){B.killEvent(t),F&&(F.$lightbox.fsTransition("destroy"),F.$container.fsTransition("destroy"),F.$lightbox.addClass(q.raw.animating).fsTransition({property:"opacity"},function(){F.$lightbox.off(A.namespace),F.$container.off(A.namespace),K.off(A.namespace),N.off(A.namespace),F.$overlay.remove(),F.$lightbox.remove(),F=null,K.trigger(A.close)}),F.$lightbox.removeClass(q.raw.open),F.$overlay.removeClass(q.raw.open),F.isMobile&&D.removeClass(E.lock))}function c(){var t=m();F.isMobile?0:F.duration,F.isMobile||F.$controls.css({marginTop:(F.contentHeight-F.controlHeight-F.metaHeight)/2}),!F.visible&&F.isMobile&&F.gallery.active&&F.$content.fsTouch({axis:"x",swipe:!0}).on(A.swipe,z),F.$lightbox.fsTransition({property:F.contentHeight!==F.oldContentHeight?"height":"width"},function(){F.$container.fsTransition({property:"opacity"},function(){F.$lightbox.removeClass(q.raw.animating),F.isAnimating=!1}),F.$lightbox.removeClass(q.raw.loading),F.visible=!0,K.trigger(A.open),F.gallery.active&&y()}),F.isMobile||F.$lightbox.css({height:F.contentHeight+F.paddingVertical,width:F.contentWidth+F.paddingHorizontal,top:F.fixed?0:t.top});var i=F.oldContentHeight!==F.contentHeight||F.oldContentWidth!==F.contentWidth;(F.isMobile||!i)&&F.$lightbox.fsTransition("resolve"),F.oldContentHeight=F.contentHeight,F.oldContentWidth=F.contentWidth,F.isMobile&&D.addClass(E.lock)}function h(){if(F.visible&&!F.isMobile){var t=m();F.$controls.css({marginTop:(F.contentHeight-F.controlHeight-F.metaHeight)/2}),F.$lightbox.css({height:F.contentHeight+F.paddingVertical,width:F.contentWidth+F.paddingHorizontal,top:F.fixed?0:t.top})}}function p(){var t=m();F.$lightbox.css({top:F.fixed?0:t.top})}function m(){if(F.isMobile)return{left:0,top:0};var t={left:(i.windowWidth-F.contentWidth-F.paddingHorizontal)/2,top:F.top<=0?(i.windowHeight-F.contentHeight-F.paddingVertical)/2:F.top};return F.fixed!==!0&&(t.top+=K.scrollTop()),t}function u(t){B.killEvent(t),F.captionOpen?w():(F.$lightbox.addClass(q.raw.caption_open).find(q.caption_toggle).text(F.labels.captionOpen),F.captionOpen=!0)}function w(){F.$lightbox.removeClass(q.raw.caption_open).find(q.caption_toggle).text(F.labels.captionClosed),F.captionOpen=!1}function H(){var t=this.attr("title"),i=t!==e&&t?t.replace(/^\s+|\s+$/g,""):!1;return i?'<p class="caption">'+i+"</p>":""}function v(i){F.$image=t("<img>"),F.$image.one(A.load,function(){var t=k(F.$image);F.naturalHeight=t.naturalHeight,F.naturalWidth=t.naturalWidth,F.retina&&(F.naturalHeight/=2,F.naturalWidth/=2),F.$content.prepend(F.$image),""===F.$caption.html()?F.$caption.hide():F.$caption.show(),f(),c()}).error(j).attr("src",i).addClass(q.raw.image),(F.$image[0].complete||4===F.$image[0].readyState)&&F.$image.trigger(A.load)}function f(){var t=0;for(F.windowHeight=F.viewportHeight=i.windowHeight-F.mobilePaddingVertical-F.paddingVertical,F.windowWidth=F.viewportWidth=i.windowWidth-F.mobilePaddingHorizontal-F.paddingHorizontal,F.contentHeight=1/0,F.contentWidth=1/0,F.imageMarginTop=0,F.imageMarginLeft=0;F.contentHeight>F.viewportHeight&&2>t;)F.imageHeight=0===t?F.naturalHeight:F.$image.outerHeight(),F.imageWidth=0===t?F.naturalWidth:F.$image.outerWidth(),F.metaHeight=0===t?0:F.metaHeight,F.spacerHeight=0===t?0:F.spacerHeight,0===t&&(F.ratioHorizontal=F.imageHeight/F.imageWidth,F.ratioVertical=F.imageWidth/F.imageHeight,F.isWide=F.imageWidth>F.imageHeight),F.imageHeight<F.minHeight&&(F.minHeight=F.imageHeight),F.imageWidth<F.minWidth&&(F.minWidth=F.imageWidth),F.isMobile?(F.isTouch?(F.$controlBox.css({width:i.windowWidth}),F.spacerHeight=F.$controls.outerHeight(!0)):(F.$tools.css({width:i.windowWidth}),F.spacerHeight=F.$tools.outerHeight(!0)),F.contentHeight=F.viewportHeight,F.contentWidth=F.viewportWidth,b(),F.imageMarginTop=(F.contentHeight-F.targetImageHeight-F.spacerHeight)/2,F.imageMarginLeft=(F.contentWidth-F.targetImageWidth)/2):(0===t&&(F.viewportHeight-=F.margin+F.paddingVertical,F.viewportWidth-=F.margin+F.paddingHorizontal),F.viewportHeight-=F.metaHeight,b(),F.contentHeight=F.targetImageHeight,F.contentWidth=F.targetImageWidth),F.isMobile||F.isTouch||F.$meta.css({width:F.contentWidth}),F.$image.css({height:F.targetImageHeight,width:F.targetImageWidth,marginTop:F.imageMarginTop,marginLeft:F.imageMarginLeft}),F.isMobile||(F.metaHeight=F.$meta.outerHeight(!0),F.contentHeight+=F.metaHeight),t++}function b(){var t=F.isMobile?F.contentHeight-F.spacerHeight:F.viewportHeight,i=F.isMobile?F.contentWidth:F.viewportWidth;F.isWide?(F.targetImageWidth=i,F.targetImageHeight=F.targetImageWidth*F.ratioHorizontal,F.targetImageHeight>t&&(F.targetImageHeight=t,F.targetImageWidth=F.targetImageHeight*F.ratioVertical)):(F.targetImageHeight=t,F.targetImageWidth=F.targetImageHeight*F.ratioVertical,F.targetImageWidth>i&&(F.targetImageWidth=i,F.targetImageHeight=F.targetImageWidth*F.ratioHorizontal)),(F.targetImageWidth>F.imageWidth||F.targetImageHeight>F.imageHeight)&&(F.targetImageHeight=F.imageHeight,F.targetImageWidth=F.imageWidth),(F.targetImageWidth<F.minWidth||F.targetImageHeight<F.minHeight)&&(F.targetImageWidth<F.minWidth?(F.targetImageWidth=F.minWidth,F.targetImageHeight=F.targetImageWidth*F.ratioHorizontal):(F.targetImageHeight=F.minHeight,F.targetImageWidth=F.targetImageHeight*F.ratioVertical))}function $(i){var e=i.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i),o=i.match(/(?:www\.|player\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|video\/|)(\d+)(?:$|\/|\?)/),a=i.split("?").slice(1)[0],n=null!==e?"//www.youtube.com/embed/"+e[1]:"//player.vimeo.com/video/"+o[3];a.trim()&&(n+="?"+a),F.$videoWrapper=t('<div class="'+q.raw.videoWrapper+'"></div>'),F.$video=t('<iframe class="'+q.raw.video+'" seamless="seamless"></iframe>'),F.$video.attr("src",n).addClass(q.raw.video).prependTo(F.$videoWrapper),F.$content.prepend(F.$videoWrapper),W(),c()}function W(){F.windowHeight=F.viewportHeight=i.windowHeight-F.mobilePaddingVertical-F.paddingVertical,F.windowWidth=F.viewportWidth=i.windowWidth-F.mobilePaddingHorizontal-F.paddingHorizontal,F.videoMarginTop=0,F.videoMarginLeft=0,F.isMobile?(F.isTouch?(F.$controlBox.css({width:i.windowWidth}),F.spacerHeight=F.$controls.outerHeight(!0)):(F.$tools.css({width:i.windowWidth}),F.spacerHeight=F.$tools.outerHeight(!0)),F.viewportHeight-=F.spacerHeight,F.targetVideoWidth=F.viewportWidth,F.targetVideoHeight=F.targetVideoWidth*F.videoRatio,F.targetVideoHeight>F.viewportHeight&&(F.targetVideoHeight=F.viewportHeight,F.targetVideoWidth=F.targetVideoHeight/F.videoRatio),F.videoMarginTop=(F.viewportHeight-F.targetVideoHeight)/2,F.videoMarginLeft=(F.viewportWidth-F.targetVideoWidth)/2):(F.viewportHeight=F.windowHeight-F.margin,F.viewportWidth=F.windowWidth-F.margin,F.targetVideoWidth=F.videoWidth>F.viewportWidth?F.viewportWidth:F.videoWidth,F.targetVideoWidth<F.minWidth&&(F.targetVideoWidth=F.minWidth),F.targetVideoHeight=F.targetVideoWidth*F.videoRatio,F.contentHeight=F.targetVideoHeight,F.contentWidth=F.targetVideoWidth),F.isMobile||F.isTouch||F.$meta.css({width:F.contentWidth}),F.$videoWrapper.css({height:F.targetVideoHeight,width:F.targetVideoWidth,marginTop:F.videoMarginTop,marginLeft:F.videoMarginLeft}),F.isMobile||(F.metaHeight=F.$meta.outerHeight(!0),F.contentHeight=F.targetVideoHeight+F.metaHeight)}function y(){var i="";F.gallery.index>0&&(i=F.gallery.$items.eq(F.gallery.index-1).attr("href"),L(i)||t('<img src="'+i+'">')),F.gallery.index<F.gallery.total&&(i=F.gallery.$items.eq(F.gallery.index+1).attr("href"),L(i)||t('<img src="'+i+'">'))}function x(i){B.killEvent(i);var e=t(i.currentTarget);F.isAnimating||e.hasClass(q.raw.control_disabled)||(F.isAnimating=!0,w(),F.gallery.index+=e.hasClass(q.raw.control_next)?1:-1,F.gallery.index>F.gallery.total&&(F.gallery.index=F.infinite?0:F.gallery.total),F.gallery.index<0&&(F.gallery.index=F.infinite?F.gallery.total:0),F.$lightbox.addClass(q.raw.animating),F.$container.fsTransition({property:"opacity"},function(){"undefined"!=typeof F.$image&&F.$image.remove(),"undefined"!=typeof F.$videoWrapper&&F.$videoWrapper.remove(),F.$el=F.gallery.$items.eq(F.gallery.index),F.$caption.html(F.formatter.call(F.$el,F)),F.$position.find(q.position_current).html(F.gallery.index+1);var t=F.$el.attr("href"),i=L(t);i?$(t):v(t),I()}),F.$lightbox.addClass(q.raw.loading))}function I(){F.$controls.removeClass(q.raw.control_disabled),F.infinite||(0===F.gallery.index&&F.$controls.filter(q.control_previous).addClass(E.control_disabled),F.gallery.index===F.gallery.total&&F.$controls.filter(q.control_next).addClass(E.control_disabled))}function C(t){!F.gallery.active||37!==t.keyCode&&39!==t.keyCode?27===t.keyCode&&F.$close.trigger(A.click):(B.killEvent(t),F.$controls.filter(37===t.keyCode?q.control_previous:q.control_next).trigger(A.click))}function M(i){var e=t(i).find("> :first-child").clone();_(e)}function V(i){i+=i.indexOf("?")>-1?"&"+F.requestKey+"=true":"?"+F.requestKey+"=true";var e=t('<iframe class="'+q.raw.iframe+'" src="'+i+'"></iframe>');_(e)}function _(t){F.$content.append(t),T(t),c()}function T(t){F.windowHeight=i.windowHeight-F.mobilePaddingVertical-F.paddingVertical,F.windowWidth=i.windowWidth-F.mobilePaddingHorizontal-F.paddingHorizontal,F.objectHeight=t.outerHeight(!0),F.objectWidth=t.outerWidth(!0),F.targetHeight=F.targetHeight||(F.$el?F.$el.data(P+"-height"):null),F.targetWidth=F.targetWidth||(F.$el?F.$el.data(P+"-width"):null),F.maxHeight=F.windowHeight<0?F.minHeight:F.windowHeight,F.isIframe=t.is("iframe"),F.objectMarginTop=0,F.objectMarginLeft=0,F.isMobile||(F.windowHeight-=F.margin,F.windowWidth-=F.margin),F.contentHeight=F.targetHeight?F.targetHeight:F.isIframe||F.isMobile?F.windowHeight:F.objectHeight,F.contentWidth=F.targetWidth?F.targetWidth:F.isIframe||F.isMobile?F.windowWidth:F.objectWidth,(F.isIframe||F.isObject)&&F.isMobile?(F.contentHeight=F.windowHeight,F.contentWidth=F.windowWidth):F.isObject&&(F.contentHeight=F.contentHeight>F.windowHeight?F.windowHeight:F.contentHeight,F.contentWidth=F.contentWidth>F.windowWidth?F.windowWidth:F.contentWidth)}function j(){var i=t('<div class="'+q.raw.error+'"><p>Error Loading Resource</p></div>');F.type="element",F.$tools.remove(),F.$image.off(A.namespace),_(i)}function z(t){F.captionOpen||F.$controls.filter("left"===t.directionX?q.control_next:q.control_previous).trigger(A.click)}function k(t){var i=t[0],e=new Image;return"undefined"!=typeof i.naturalHeight?{naturalHeight:i.naturalHeight,naturalWidth:i.naturalWidth}:"img"===i.tagName.toLowerCase()?(e.src=i.src,{naturalHeight:e.height,naturalWidth:e.width}):!1}function L(t){return t.indexOf("youtube.com")>-1||t.indexOf("youtu.be")>-1||t.indexOf("vimeo.com")>-1}var O=i.Plugin("lightbox",{widget:!0,defaults:{customClass:"",extensions:["jpg","sjpg","jpeg","png","gif"],fixed:!1,formatter:H,infinite:!1,labels:{close:"Close",count:"of",next:"Next",previous:"Previous",captionClosed:"View Caption",captionOpen:"Close Caption"},margin:50,minHeight:100,minWidth:100,mobile:!1,retina:!1,requestKey:"fs-lightbox",top:0,videoRatio:.5625,videoWidth:800},classes:["loading","animating","fixed","mobile","touch","inline","iframed","open","overlay","close","loading_icon","container","content","image","video","video_wrapper","tools","meta","controls","control","control_previous","control_next","control_disabled","position","position_current","position_total","caption_toggle","caption","caption_open","iframe","error","lock"],events:{open:"open",close:"close",swipe:"swipe"},methods:{_setup:o,_construct:n,_destruct:r,_resize:a,resize:d},utilities:{_initialize:g,close:s}}),P=O.namespace,R=O.defaults,q=O.classes,E=q.raw,A=O.events,B=O.functions,S=i.window,K=i.$window,N=null,D=null,F=null}(jQuery,Formstone);
!function(t){"use strict";"object"==typeof exports?module.exports=t(window.jQuery):"function"==typeof define&&define.amd?define(["jquery"],t):window.jQuery&&!window.jQuery.fn.colorpicker&&t(window.jQuery)}(function(t){"use strict";var e=function(e,o){this.value={h:0,s:0,b:0,a:1},this.origFormat=null,o&&t.extend(this.colors,o),e&&(void 0!==e.toLowerCase?(e+="",this.setColor(e)):void 0!==e.h&&(this.value=e))};e.prototype={constructor:e,colors:{aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32",transparent:"transparent"},_sanitizeNumber:function(t){return"number"==typeof t?t:isNaN(t)||null===t||""===t||void 0===t?1:void 0!==t.toLowerCase?parseFloat(t):1},isTransparent:function(t){return t?(t=t.toLowerCase().trim(),"transparent"===t||t.match(/#?00000000/)||t.match(/(rgba|hsla)\(0,0,0,0?\.?0\)/)):!1},rgbaIsTransparent:function(t){return 0===t.r&&0===t.g&&0===t.b&&0===t.a},setColor:function(t){t=t.toLowerCase().trim(),t&&(this.isTransparent(t)?this.value={h:0,s:0,b:0,a:0}:this.value=this.stringToHSB(t)||{h:0,s:0,b:0,a:1})},stringToHSB:function(e){e=e.toLowerCase();var o;"undefined"!=typeof this.colors[e]&&(e=this.colors[e],o="alias");var i=this,r=!1;return t.each(this.stringParsers,function(t,s){var a=s.re.exec(e),n=a&&s.parse.apply(i,[a]),l=o||s.format||"rgba";return n?(r=l.match(/hsla?/)?i.RGBtoHSB.apply(i,i.HSLtoRGB.apply(i,n)):i.RGBtoHSB.apply(i,n),i.origFormat=l,!1):!0}),r},setHue:function(t){this.value.h=1-t},setSaturation:function(t){this.value.s=t},setBrightness:function(t){this.value.b=1-t},setAlpha:function(t){this.value.a=parseInt(100*(1-t),10)/100},toRGB:function(t,e,o,i){t||(t=this.value.h,e=this.value.s,o=this.value.b),t*=360;var r,s,a,n,l;return t=t%360/60,l=o*e,n=l*(1-Math.abs(t%2-1)),r=s=a=o-l,t=~~t,r+=[l,n,0,0,n,l][t],s+=[n,l,l,n,0,0][t],a+=[0,0,n,l,l,n][t],{r:Math.round(255*r),g:Math.round(255*s),b:Math.round(255*a),a:i||this.value.a}},toHex:function(t,e,o,i){var r=this.toRGB(t,e,o,i);return this.rgbaIsTransparent(r)?"transparent":"#"+(1<<24|parseInt(r.r)<<16|parseInt(r.g)<<8|parseInt(r.b)).toString(16).substr(1)},toHSL:function(t,e,o,i){t=t||this.value.h,e=e||this.value.s,o=o||this.value.b,i=i||this.value.a;var r=t,s=(2-e)*o,a=e*o;return a/=s>0&&1>=s?s:2-s,s/=2,a>1&&(a=1),{h:isNaN(r)?0:r,s:isNaN(a)?0:a,l:isNaN(s)?0:s,a:isNaN(i)?0:i}},toAlias:function(t,e,o,i){var r=this.toHex(t,e,o,i);for(var s in this.colors)if(this.colors[s]===r)return s;return!1},RGBtoHSB:function(t,e,o,i){t/=255,e/=255,o/=255;var r,s,a,n;return a=Math.max(t,e,o),n=a-Math.min(t,e,o),r=0===n?null:a===t?(e-o)/n:a===e?(o-t)/n+2:(t-e)/n+4,r=(r+360)%6*60/360,s=0===n?0:n/a,{h:this._sanitizeNumber(r),s:s,b:a,a:this._sanitizeNumber(i)}},HueToRGB:function(t,e,o){return 0>o?o+=1:o>1&&(o-=1),1>6*o?t+(e-t)*o*6:1>2*o?e:2>3*o?t+(e-t)*(2/3-o)*6:t},HSLtoRGB:function(t,e,o,i){0>e&&(e=0);var r;r=.5>=o?o*(1+e):o+e-o*e;var s=2*o-r,a=t+1/3,n=t,l=t-1/3,c=Math.round(255*this.HueToRGB(s,r,a)),h=Math.round(255*this.HueToRGB(s,r,n)),p=Math.round(255*this.HueToRGB(s,r,l));return[c,h,p,this._sanitizeNumber(i)]},toString:function(t){t=t||"rgba";var e=!1;switch(t){case"rgb":return e=this.toRGB(),this.rgbaIsTransparent(e)?"transparent":"rgb("+e.r+","+e.g+","+e.b+")";case"rgba":return e=this.toRGB(),"rgba("+e.r+","+e.g+","+e.b+","+e.a+")";case"hsl":return e=this.toHSL(),"hsl("+Math.round(360*e.h)+","+Math.round(100*e.s)+"%,"+Math.round(100*e.l)+"%)";case"hsla":return e=this.toHSL(),"hsla("+Math.round(360*e.h)+","+Math.round(100*e.s)+"%,"+Math.round(100*e.l)+"%,"+e.a+")";case"hex":return this.toHex();case"alias":return this.toAlias()||this.toHex();default:return e}},stringParsers:[{re:/rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*?\)/,format:"rgb",parse:function(t){return[t[1],t[2],t[3],1]}},{re:/rgb\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*?\)/,format:"rgb",parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],1]}},{re:/rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,format:"rgba",parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,format:"rgba",parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/hsl\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*?\)/,format:"hsl",parse:function(t){return[t[1]/360,t[2]/100,t[3]/100,t[4]]}},{re:/hsla\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,format:"hsla",parse:function(t){return[t[1]/360,t[2]/100,t[3]/100,t[4]]}},{re:/#?([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,format:"hex",parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16),1]}},{re:/#?([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,format:"hex",parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16),1]}}],colorNameToHex:function(t){return"undefined"!=typeof this.colors[t.toLowerCase()]?this.colors[t.toLowerCase()]:!1}};var o={horizontal:!1,inline:!1,color:!1,format:!1,input:"input",container:!1,component:".add-on, .input-group-addon",sliders:{saturation:{maxLeft:100,maxTop:100,callLeft:"setSaturation",callTop:"setBrightness"},hue:{maxLeft:0,maxTop:100,callLeft:!1,callTop:"setHue"},alpha:{maxLeft:0,maxTop:100,callLeft:!1,callTop:"setAlpha"}},slidersHorz:{saturation:{maxLeft:100,maxTop:100,callLeft:"setSaturation",callTop:"setBrightness"},hue:{maxLeft:100,maxTop:0,callLeft:"setHue",callTop:!1},alpha:{maxLeft:100,maxTop:0,callLeft:"setAlpha",callTop:!1}},template:'<div class="colorpicker dropdown-menu"><div class="colorpicker-saturation"><i><b></b></i></div><div class="colorpicker-hue"><i></i></div><div class="colorpicker-alpha"><i></i></div><div class="colorpicker-color"><div /></div><div class="colorpicker-selectors"></div></div>',align:"right",customClass:null,colorSelectors:null},i=function(i,r){if(this.element=t(i).addClass("colorpicker-element"),this.options=t.extend(!0,{},o,this.element.data(),r),this.component=this.options.component,this.component=this.component!==!1?this.element.find(this.component):!1,this.component&&0===this.component.length&&(this.component=!1),this.container=this.options.container===!0?this.element:this.options.container,this.container=this.container!==!1?t(this.container):!1,this.input=this.element.is("input")?this.element:this.options.input?this.element.find(this.options.input):!1,this.input&&0===this.input.length&&(this.input=!1),this.color=new e(this.options.color!==!1?this.options.color:this.getValue(),this.options.colorSelectors),this.format=this.options.format!==!1?this.options.format:this.color.origFormat,this.picker=t(this.options.template),this.options.customClass&&this.picker.addClass(this.options.customClass),this.options.inline?this.picker.addClass("colorpicker-inline colorpicker-visible"):this.picker.addClass("colorpicker-hidden"),this.options.horizontal&&this.picker.addClass("colorpicker-horizontal"),("rgba"===this.format||"hsla"===this.format||this.options.format===!1)&&this.picker.addClass("colorpicker-with-alpha"),"right"===this.options.align&&this.picker.addClass("colorpicker-right"),this.options.colorSelectors){var s=this;t.each(this.options.colorSelectors,function(e,o){var i=t("<i />").css("background-color",o).data("class",e);i.click(function(){s.setValue(t(this).css("background-color"))}),s.picker.find(".colorpicker-selectors").append(i)}),this.picker.find(".colorpicker-selectors").show()}this.picker.on("mousedown.colorpicker touchstart.colorpicker",t.proxy(this.mousedown,this)),this.picker.appendTo(this.container?this.container:t("body")),this.input!==!1&&(this.input.on({"keyup.colorpicker":t.proxy(this.keyup,this)}),this.input.on({"change.colorpicker":t.proxy(this.change,this)}),this.component===!1&&this.element.on({"focus.colorpicker":t.proxy(this.show,this)}),this.options.inline===!1&&this.element.on({"focusout.colorpicker":t.proxy(this.hide,this)})),this.component!==!1&&this.component.on({"click.colorpicker":t.proxy(this.show,this)}),this.input===!1&&this.component===!1&&this.element.on({"click.colorpicker":t.proxy(this.show,this)}),this.input!==!1&&this.component!==!1&&"color"===this.input.attr("type")&&this.input.on({"click.colorpicker":t.proxy(this.show,this),"focus.colorpicker":t.proxy(this.show,this)}),this.update(),t(t.proxy(function(){this.element.trigger("create")},this))};i.Color=e,i.prototype={constructor:i,destroy:function(){this.picker.remove(),this.element.removeData("colorpicker").off(".colorpicker"),this.input!==!1&&this.input.off(".colorpicker"),this.component!==!1&&this.component.off(".colorpicker"),this.element.removeClass("colorpicker-element"),this.element.trigger({type:"destroy"})},reposition:function(){if(this.options.inline!==!1||this.options.container)return!1;var t=this.container&&this.container[0]!==document.body?"position":"offset",e=this.component||this.element,o=e[t]();"right"===this.options.align&&(o.left-=this.picker.outerWidth()-e.outerWidth()),this.picker.css({top:o.top+e.outerHeight(),left:o.left})},show:function(e){return this.isDisabled()?!1:(this.picker.addClass("colorpicker-visible").removeClass("colorpicker-hidden"),this.reposition(),t(window).on("resize.colorpicker",t.proxy(this.reposition,this)),!e||this.hasInput()&&"color"!==this.input.attr("type")||e.stopPropagation&&e.preventDefault&&(e.stopPropagation(),e.preventDefault()),this.options.inline===!1&&t(window.document).on({"mousedown.colorpicker":t.proxy(this.hide,this)}),void this.element.trigger({type:"showPicker",color:this.color}))},hide:function(){this.picker.addClass("colorpicker-hidden").removeClass("colorpicker-visible"),t(window).off("resize.colorpicker",this.reposition),t(document).off({"mousedown.colorpicker":this.hide}),this.update(),this.element.trigger({type:"hidePicker",color:this.color})},updateData:function(t){return t=t||this.color.toString(this.format),this.element.data("color",t),t},updateInput:function(t){if(t=t||this.color.toString(this.format),this.input!==!1){if(this.options.colorSelectors){var o=new e(t,this.options.colorSelectors),i=o.toAlias();"undefined"!=typeof this.options.colorSelectors[i]&&(t=i)}this.input.prop("value",t)}return t},updatePicker:function(t){void 0!==t&&(this.color=new e(t,this.options.colorSelectors));var o=this.options.horizontal===!1?this.options.sliders:this.options.slidersHorz,i=this.picker.find("i");return 0!==i.length?(this.options.horizontal===!1?(o=this.options.sliders,i.eq(1).css("top",o.hue.maxTop*(1-this.color.value.h)).end().eq(2).css("top",o.alpha.maxTop*(1-this.color.value.a))):(o=this.options.slidersHorz,i.eq(1).css("left",o.hue.maxLeft*(1-this.color.value.h)).end().eq(2).css("left",o.alpha.maxLeft*(1-this.color.value.a))),i.eq(0).css({top:o.saturation.maxTop-this.color.value.b*o.saturation.maxTop,left:this.color.value.s*o.saturation.maxLeft}),this.picker.find(".colorpicker-saturation").css("backgroundColor",this.color.toHex(this.color.value.h,1,1,1)),this.picker.find(".colorpicker-alpha").css("backgroundColor",this.color.toHex()),this.picker.find(".colorpicker-color, .colorpicker-color div").css("backgroundColor",this.color.toString(this.format)),t):void 0},updateComponent:function(t){if(t=t||this.color.toString(this.format),this.component!==!1){var e=this.component.find("i").eq(0);e.length>0?e.css({backgroundColor:t}):this.component.css({backgroundColor:t})}return t},update:function(t){var e;return(this.getValue(!1)!==!1||t===!0)&&(e=this.updateComponent(),this.updateInput(e),this.updateData(e),this.updatePicker()),e},setValue:function(t){this.color=new e(t,this.options.colorSelectors),this.update(!0),this.element.trigger({type:"changeColor",color:this.color,value:t})},getValue:function(t){t=void 0===t?"#000000":t;var e;return e=this.hasInput()?this.input.val():this.element.data("color"),(void 0===e||""===e||null===e)&&(e=t),e},hasInput:function(){return this.input!==!1},isDisabled:function(){return this.hasInput()?this.input.prop("disabled")===!0:!1},disable:function(){return this.hasInput()?(this.input.prop("disabled",!0),this.element.trigger({type:"disable",color:this.color,value:this.getValue()}),!0):!1},enable:function(){return this.hasInput()?(this.input.prop("disabled",!1),this.element.trigger({type:"enable",color:this.color,value:this.getValue()}),!0):!1},currentSlider:null,mousePointer:{left:0,top:0},mousedown:function(e){e.pageX||e.pageY||!e.originalEvent||(e.pageX=e.originalEvent.touches[0].pageX,e.pageY=e.originalEvent.touches[0].pageY),e.stopPropagation(),e.preventDefault();var o=t(e.target),i=o.closest("div"),r=this.options.horizontal?this.options.slidersHorz:this.options.sliders;if(!i.is(".colorpicker")){if(i.is(".colorpicker-saturation"))this.currentSlider=t.extend({},r.saturation);else if(i.is(".colorpicker-hue"))this.currentSlider=t.extend({},r.hue);else{if(!i.is(".colorpicker-alpha"))return!1;this.currentSlider=t.extend({},r.alpha)}var s=i.offset();this.currentSlider.guide=i.find("i")[0].style,this.currentSlider.left=e.pageX-s.left,this.currentSlider.top=e.pageY-s.top,this.mousePointer={left:e.pageX,top:e.pageY},t(document).on({"mousemove.colorpicker":t.proxy(this.mousemove,this),"touchmove.colorpicker":t.proxy(this.mousemove,this),"mouseup.colorpicker":t.proxy(this.mouseup,this),"touchend.colorpicker":t.proxy(this.mouseup,this)}).trigger("mousemove")}return!1},mousemove:function(t){t.pageX||t.pageY||!t.originalEvent||(t.pageX=t.originalEvent.touches[0].pageX,t.pageY=t.originalEvent.touches[0].pageY),t.stopPropagation(),t.preventDefault();var e=Math.max(0,Math.min(this.currentSlider.maxLeft,this.currentSlider.left+((t.pageX||this.mousePointer.left)-this.mousePointer.left))),o=Math.max(0,Math.min(this.currentSlider.maxTop,this.currentSlider.top+((t.pageY||this.mousePointer.top)-this.mousePointer.top)));return this.currentSlider.guide.left=e+"px",this.currentSlider.guide.top=o+"px",this.currentSlider.callLeft&&this.color[this.currentSlider.callLeft].call(this.color,e/this.currentSlider.maxLeft),this.currentSlider.callTop&&this.color[this.currentSlider.callTop].call(this.color,o/this.currentSlider.maxTop),"setAlpha"===this.currentSlider.callTop&&this.options.format===!1&&(1!==this.color.value.a?(this.format="rgba",this.color.origFormat="rgba"):(this.format="hex",this.color.origFormat="hex")),this.update(!0),this.element.trigger({type:"changeColor",color:this.color}),!1},mouseup:function(e){return e.stopPropagation(),e.preventDefault(),t(document).off({"mousemove.colorpicker":this.mousemove,"touchmove.colorpicker":this.mousemove,"mouseup.colorpicker":this.mouseup,"touchend.colorpicker":this.mouseup}),!1},change:function(t){this.keyup(t)},keyup:function(t){38===t.keyCode?(this.color.value.a<1&&(this.color.value.a=Math.round(100*(this.color.value.a+.01))/100),this.update(!0)):40===t.keyCode?(this.color.value.a>0&&(this.color.value.a=Math.round(100*(this.color.value.a-.01))/100),this.update(!0)):(this.color=new e(this.input.val(),this.options.colorSelectors),this.color.origFormat&&this.options.format===!1&&(this.format=this.color.origFormat),this.getValue(!1)!==!1&&(this.updateData(),this.updateComponent(),this.updatePicker())),this.element.trigger({type:"changeColor",color:this.color,value:this.input.val()})}},t.colorpicker=i,t.fn.colorpicker=function(e){var o,r=arguments,s=this.each(function(){var s=t(this),a=s.data("colorpicker"),n="object"==typeof e?e:{};a||"string"==typeof e?"string"==typeof e&&(o=a[e].apply(a,Array.prototype.slice.call(r,1))):s.data("colorpicker",new i(this,n))});return"getValue"===e?o:s},t.fn.colorpicker.constructor=i});
!function(e,t){"function"==typeof define&&define.amd?define("sifter",t):"object"==typeof exports?module.exports=t():e.Sifter=t()}(this,function(){var e=function(e,t){this.items=e,this.settings=t||{diacritics:!0}};e.prototype.tokenize=function(e){if(e=i(String(e||"").toLowerCase()),!e||!e.length)return[];var t,n,r,a,l=[],u=e.split(/ +/);for(t=0,n=u.length;n>t;t++){if(r=o(u[t]),this.settings.diacritics)for(a in s)s.hasOwnProperty(a)&&(r=r.replace(new RegExp(a,"g"),s[a]));l.push({string:u[t],regex:new RegExp(r,"i")})}return l},e.prototype.iterator=function(e,t){var n;n=r(e)?Array.prototype.forEach||function(e){for(var t=0,n=this.length;n>t;t++)e(this[t],t,this)}:function(e){for(var t in this)this.hasOwnProperty(t)&&e(this[t],t,this)},n.apply(e,[t])},e.prototype.getScoreFunction=function(e,t){var n,i,o,r;n=this,e=n.prepareSearch(e,t),o=e.tokens,i=e.options.fields,r=o.length;var s=function(e,t){var n,i;return e?(e=String(e||""),i=e.search(t.regex),-1===i?0:(n=t.string.length/e.length,0===i&&(n+=.5),n)):0},a=function(){var e=i.length;return e?1===e?function(e,t){return s(t[i[0]],e)}:function(t,n){for(var o=0,r=0;e>o;o++)r+=s(n[i[o]],t);return r/e}:function(){return 0}}();return r?1===r?function(e){return a(o[0],e)}:"and"===e.options.conjunction?function(e){for(var t,n=0,i=0;r>n;n++){if(t=a(o[n],e),0>=t)return 0;i+=t}return i/r}:function(e){for(var t=0,n=0;r>t;t++)n+=a(o[t],e);return n/r}:function(){return 0}},e.prototype.getSortFunction=function(e,n){var i,o,r,s,a,l,u,p,c,d,h;if(r=this,e=r.prepareSearch(e,n),h=!e.query&&n.sort_empty||n.sort,c=function(e,t){return"$score"===e?t.score:r.items[t.id][e]},a=[],h)for(i=0,o=h.length;o>i;i++)(e.query||"$score"!==h[i].field)&&a.push(h[i]);if(e.query){for(d=!0,i=0,o=a.length;o>i;i++)if("$score"===a[i].field){d=!1;break}d&&a.unshift({field:"$score",direction:"desc"})}else for(i=0,o=a.length;o>i;i++)if("$score"===a[i].field){a.splice(i,1);break}for(p=[],i=0,o=a.length;o>i;i++)p.push("desc"===a[i].direction?-1:1);return l=a.length,l?1===l?(s=a[0].field,u=p[0],function(e,n){return u*t(c(s,e),c(s,n))}):function(e,n){var i,o,r;for(i=0;l>i;i++)if(r=a[i].field,o=p[i]*t(c(r,e),c(r,n)))return o;return 0}:null},e.prototype.prepareSearch=function(e,t){if("object"==typeof e)return e;t=n({},t);var i=t.fields,o=t.sort,s=t.sort_empty;return i&&!r(i)&&(t.fields=[i]),o&&!r(o)&&(t.sort=[o]),s&&!r(s)&&(t.sort_empty=[s]),{options:t,query:String(e||"").toLowerCase(),tokens:this.tokenize(e),total:0,items:[]}},e.prototype.search=function(e,t){var n,i,o,r,s=this;return i=this.prepareSearch(e,t),t=i.options,e=i.query,r=t.score||s.getScoreFunction(i),e.length?s.iterator(s.items,function(e,o){n=r(e),(t.filter===!1||n>0)&&i.items.push({score:n,id:o})}):s.iterator(s.items,function(e,t){i.items.push({score:1,id:t})}),o=s.getSortFunction(i,t),o&&i.items.sort(o),i.total=i.items.length,"number"==typeof t.limit&&(i.items=i.items.slice(0,t.limit)),i};var t=function(e,t){return"number"==typeof e&&"number"==typeof t?e>t?1:t>e?-1:0:(e=a(String(e||"")),t=a(String(t||"")),e>t?1:t>e?-1:0)},n=function(e,t){var n,i,o,r;for(n=1,i=arguments.length;i>n;n++)if(r=arguments[n])for(o in r)r.hasOwnProperty(o)&&(e[o]=r[o]);return e},i=function(e){return(e+"").replace(/^\s+|\s+$|/g,"")},o=function(e){return(e+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},r=Array.isArray||$&&$.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},s={a:"[aÀÁÂÃÄÅàáâãäåĀāąĄ]",c:"[cÇçćĆčČ]",d:"[dđĐďĎ]",e:"[eÈÉÊËèéêëěĚĒēęĘ]",i:"[iÌÍÎÏìíîïĪī]",l:"[lłŁ]",n:"[nÑñňŇńŃ]",o:"[oÒÓÔÕÕÖØòóôõöøŌō]",r:"[rřŘ]",s:"[sŠšśŚ]",t:"[tťŤ]",u:"[uÙÚÛÜùúûüůŮŪū]",y:"[yŸÿýÝ]",z:"[zŽžżŻźŹ]"},a=function(){var e,t,n,i,o="",r={};for(n in s)if(s.hasOwnProperty(n))for(i=s[n].substring(2,s[n].length-1),o+=i,e=0,t=i.length;t>e;e++)r[i.charAt(e)]=n;var a=new RegExp("["+o+"]","g");return function(e){return e.replace(a,function(e){return r[e]}).toLowerCase()}}();return e}),function(e,t){"function"==typeof define&&define.amd?define("microplugin",t):"object"==typeof exports?module.exports=t():e.MicroPlugin=t()}(this,function(){var e={};e.mixin=function(e){e.plugins={},e.prototype.initializePlugins=function(e){var n,i,o,r=this,s=[];if(r.plugins={names:[],settings:{},requested:{},loaded:{}},t.isArray(e))for(n=0,i=e.length;i>n;n++)"string"==typeof e[n]?s.push(e[n]):(r.plugins.settings[e[n].name]=e[n].options,s.push(e[n].name));else if(e)for(o in e)e.hasOwnProperty(o)&&(r.plugins.settings[o]=e[o],s.push(o));for(;s.length;)r.require(s.shift())},e.prototype.loadPlugin=function(t){var n=this,i=n.plugins,o=e.plugins[t];if(!e.plugins.hasOwnProperty(t))throw new Error('Unable to find "'+t+'" plugin');i.requested[t]=!0,i.loaded[t]=o.fn.apply(n,[n.plugins.settings[t]||{}]),i.names.push(t)},e.prototype.require=function(e){var t=this,n=t.plugins;if(!t.plugins.loaded.hasOwnProperty(e)){if(n.requested[e])throw new Error('Plugin has circular dependency ("'+e+'")');t.loadPlugin(e)}return n.loaded[e]},e.define=function(t,n){e.plugins[t]={name:t,fn:n}}};var t={isArray:Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}};return e}),function(e,t){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],t):"object"==typeof exports?module.exports=t(require("jquery"),require("sifter"),require("microplugin")):e.Selectize=t(e.jQuery,e.Sifter,e.MicroPlugin)}(this,function(e,t,n){"use strict";var i=function(e,t){if("string"!=typeof t||t.length){var n="string"==typeof t?new RegExp(t,"i"):t,i=function(e){var t=0;if(3===e.nodeType){var o=e.data.search(n);if(o>=0&&e.data.length>0){var r=e.data.match(n),s=document.createElement("span");s.className="highlight";var a=e.splitText(o),l=(a.splitText(r[0].length),a.cloneNode(!0));s.appendChild(l),a.parentNode.replaceChild(s,a),t=1}}else if(1===e.nodeType&&e.childNodes&&!/(script|style)/i.test(e.tagName))for(var u=0;u<e.childNodes.length;++u)u+=i(e.childNodes[u]);return t};return e.each(function(){i(this)})}},o=function(){};o.prototype={on:function(e,t){this._events=this._events||{},this._events[e]=this._events[e]||[],this._events[e].push(t)},off:function(e,t){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[e]:(this._events=this._events||{},void(e in this._events!=!1&&this._events[e].splice(this._events[e].indexOf(t),1)))},trigger:function(e){if(this._events=this._events||{},e in this._events!=!1)for(var t=0;t<this._events[e].length;t++)this._events[e][t].apply(this,Array.prototype.slice.call(arguments,1))}},o.mixin=function(e){for(var t=["on","off","trigger"],n=0;n<t.length;n++)e.prototype[t[n]]=o.prototype[t[n]]};var r=/Mac/.test(navigator.userAgent),s=65,a=13,l=27,u=37,p=38,c=80,d=39,h=40,g=78,f=8,v=46,m=16,y=r?91:17,w=r?18:17,O=9,$=1,C=2,b=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("form").validity,x=function(e){return"undefined"!=typeof e},S=function(e){return"undefined"==typeof e||null===e?null:"boolean"==typeof e?e?"1":"0":e+""},I=function(e){return(e+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},_=function(e){return(e+"").replace(/\$/g,"$$$$")},F={};F.before=function(e,t,n){var i=e[t];e[t]=function(){return n.apply(e,arguments),i.apply(e,arguments)}},F.after=function(e,t,n){var i=e[t];e[t]=function(){var t=i.apply(e,arguments);return n.apply(e,arguments),t}};var D=function(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}},k=function(e,t){var n;return function(){var i=this,o=arguments;window.clearTimeout(n),n=window.setTimeout(function(){e.apply(i,o)},t)}},A=function(e,t,n){var i,o=e.trigger,r={};e.trigger=function(){var n=arguments[0];return-1===t.indexOf(n)?o.apply(e,arguments):void(r[n]=arguments)},n.apply(e,[]),e.trigger=o;for(i in r)r.hasOwnProperty(i)&&o.apply(e,r[i])},P=function(e,t,n,i){e.on(t,n,function(t){for(var n=t.target;n&&n.parentNode!==e[0];)n=n.parentNode;return t.currentTarget=n,i.apply(this,[t])})},z=function(e){var t={};if("selectionStart"in e)t.start=e.selectionStart,t.length=e.selectionEnd-t.start;else if(document.selection){e.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-e.value.length),t.start=n.text.length-i,t.length=i}return t},T=function(e,t,n){var i,o,r={};if(n)for(i=0,o=n.length;o>i;i++)r[n[i]]=e.css(n[i]);else r=e.css();t.css(r)},j=function(t,n){if(!t)return 0;var i=e("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(t).appendTo("body");T(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var o=i.width();return i.remove(),o},q=function(e){var t=null,n=function(n,i){var o,r,s,a,l,u,p,c;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||e.data("grow")!==!1)&&(o=e.val(),n.type&&"keydown"===n.type.toLowerCase()&&(r=n.keyCode,s=r>=97&&122>=r||r>=65&&90>=r||r>=48&&57>=r||32===r,r===v||r===f?(c=z(e[0]),c.length?o=o.substring(0,c.start)+o.substring(c.start+c.length):r===f&&c.start?o=o.substring(0,c.start-1)+o.substring(c.start+1):r===v&&"undefined"!=typeof c.start&&(o=o.substring(0,c.start)+o.substring(c.start+1))):s&&(u=n.shiftKey,p=String.fromCharCode(n.keyCode),p=u?p.toUpperCase():p.toLowerCase(),o+=p)),a=e.attr("placeholder"),!o&&a&&(o=a),l=j(o,e)+4,l!==t&&(t=l,e.width(l),e.triggerHandler("resize")))};e.on("keydown keyup update blur",n),n()},E=function(n,i){var o,r,s,a,l=this;a=n[0],a.selectize=l;var u=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=u?u.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",e.extend(l,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?$:C,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++E.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?l.onSearchChange:k(l.onSearchChange,i.loadThrottle)}),l.sifter=new t(this.options,{diacritics:i.diacritics}),l.settings.options){for(o=0,r=l.settings.options.length;r>o;o++)l.registerOption(l.settings.options[o]);delete l.settings.options}if(l.settings.optgroups){for(o=0,r=l.settings.optgroups.length;r>o;o++)l.registerOptionGroup(l.settings.optgroups[o]);delete l.settings.optgroups}l.settings.mode=l.settings.mode||(1===l.settings.maxItems?"single":"multi"),"boolean"!=typeof l.settings.hideSelected&&(l.settings.hideSelected="multi"===l.settings.mode),l.initializePlugins(l.settings.plugins),l.setupCallbacks(),l.setupTemplates(),l.setup()};return o.mixin(E),n.mixin(E),e.extend(E.prototype,{setup:function(){var t,n,i,o,s,a,l,u,p,c=this,d=c.settings,h=c.eventNS,g=e(window),f=e(document),v=c.$input;if(l=c.settings.mode,u=v.attr("class")||"",t=e("<div>").addClass(d.wrapperClass).addClass(u).addClass(l),n=e("<div>").addClass(d.inputClass).addClass("items").appendTo(t),i=e('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",v.is(":disabled")?"-1":c.tabIndex),a=e(d.dropdownParent||t),o=e("<div>").addClass(d.dropdownClass).addClass(l).hide().appendTo(a),s=e("<div>").addClass(d.dropdownContentClass).appendTo(o),c.settings.copyClassesToDropdown&&o.addClass(u),t.css({width:v[0].style.width}),c.plugins.names.length&&(p="plugin-"+c.plugins.names.join(" plugin-"),t.addClass(p),o.addClass(p)),(null===d.maxItems||d.maxItems>1)&&c.tagType===$&&v.attr("multiple","multiple"),c.settings.placeholder&&i.attr("placeholder",d.placeholder),!c.settings.splitOn&&c.settings.delimiter){var O=c.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");c.settings.splitOn=new RegExp("\\s*"+O+"+\\s*")}v.attr("autocorrect")&&i.attr("autocorrect",v.attr("autocorrect")),v.attr("autocapitalize")&&i.attr("autocapitalize",v.attr("autocapitalize")),c.$wrapper=t,c.$control=n,c.$control_input=i,c.$dropdown=o,c.$dropdown_content=s,o.on("mouseenter","[data-selectable]",function(){return c.onOptionHover.apply(c,arguments)}),o.on("mousedown click","[data-selectable]",function(){return c.onOptionSelect.apply(c,arguments)}),P(n,"mousedown","*:not(input)",function(){return c.onItemSelect.apply(c,arguments)}),q(i),n.on({mousedown:function(){return c.onMouseDown.apply(c,arguments)},click:function(){return c.onClick.apply(c,arguments)}}),i.on({mousedown:function(e){e.stopPropagation()},keydown:function(){return c.onKeyDown.apply(c,arguments)},keyup:function(){return c.onKeyUp.apply(c,arguments)},keypress:function(){return c.onKeyPress.apply(c,arguments)},resize:function(){c.positionDropdown.apply(c,[])},blur:function(){return c.onBlur.apply(c,arguments)},focus:function(){return c.ignoreBlur=!1,c.onFocus.apply(c,arguments)},paste:function(){return c.onPaste.apply(c,arguments)}}),f.on("keydown"+h,function(e){c.isCmdDown=e[r?"metaKey":"ctrlKey"],c.isCtrlDown=e[r?"altKey":"ctrlKey"],c.isShiftDown=e.shiftKey}),f.on("keyup"+h,function(e){e.keyCode===w&&(c.isCtrlDown=!1),e.keyCode===m&&(c.isShiftDown=!1),e.keyCode===y&&(c.isCmdDown=!1)}),f.on("mousedown"+h,function(e){if(c.isFocused){if(e.target===c.$dropdown[0]||e.target.parentNode===c.$dropdown[0])return!1;c.$control.has(e.target).length||e.target===c.$control[0]||c.blur(e.target)}}),g.on(["scroll"+h,"resize"+h].join(" "),function(){c.isOpen&&c.positionDropdown.apply(c,arguments)}),g.on("mousemove"+h,function(){c.ignoreHover=!1}),this.revertSettings={$children:v.children().detach(),tabindex:v.attr("tabindex")},v.attr("tabindex",-1).hide().after(c.$wrapper),e.isArray(d.items)&&(c.setValue(d.items),delete d.items),b&&v.on("invalid"+h,function(e){e.preventDefault(),c.isInvalid=!0,c.refreshState()}),c.updateOriginalInput(),c.refreshItems(),c.refreshState(),c.updatePlaceholder(),c.isSetup=!0,v.is(":disabled")&&c.disable(),c.on("change",this.onChange),v.data("selectize",c),v.addClass("selectized"),c.trigger("initialize"),d.preload===!0&&c.onSearchChange("")},setupTemplates:function(){var t=this,n=t.settings.labelField,i=t.settings.optgroupLabelField,o={optgroup:function(e){return'<div class="optgroup">'+e.html+"</div>"},optgroup_header:function(e,t){return'<div class="optgroup-header">'+t(e[i])+"</div>"},option:function(e,t){return'<div class="option">'+t(e[n])+"</div>"},item:function(e,t){return'<div class="item">'+t(e[n])+"</div>"},option_create:function(e,t){return'<div class="create">Add <strong>'+t(e.input)+"</strong>&hellip;</div>"}};t.settings.render=e.extend({},o,t.settings.render)},setupCallbacks:function(){var e,t,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(e in n)n.hasOwnProperty(e)&&(t=this.settings[n[e]],t&&this.on(e,t))},onClick:function(e){var t=this;t.isFocused||(t.focus(),e.preventDefault())},onMouseDown:function(t){var n=this,i=t.isDefaultPrevented();e(t.target);if(n.isFocused){if(t.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(t){var n=this;n.isFull()||n.isInputHidden||n.isLocked?t.preventDefault():n.settings.splitOn&&setTimeout(function(){for(var t=e.trim(n.$control_input.val()||"").split(n.settings.splitOn),i=0,o=t.length;o>i;i++)n.createItem(t[i])},0)},onKeyPress:function(e){if(this.isLocked)return e&&e.preventDefault();var t=String.fromCharCode(e.keyCode||e.which);return this.settings.create&&"multi"===this.settings.mode&&t===this.settings.delimiter?(this.createItem(),e.preventDefault(),!1):void 0},onKeyDown:function(e){var t=(e.target===this.$control_input[0],this);if(t.isLocked)return void(e.keyCode!==O&&e.preventDefault());switch(e.keyCode){case s:if(t.isCmdDown)return void t.selectAll();break;case l:return void(t.isOpen&&(e.preventDefault(),e.stopPropagation(),t.close()));case g:if(!e.ctrlKey||e.altKey)break;case h:if(!t.isOpen&&t.hasOptions)t.open();else if(t.$activeOption){t.ignoreHover=!0;var n=t.getAdjacentOption(t.$activeOption,1);n.length&&t.setActiveOption(n,!0,!0)}return void e.preventDefault();case c:if(!e.ctrlKey||e.altKey)break;case p:if(t.$activeOption){t.ignoreHover=!0;var i=t.getAdjacentOption(t.$activeOption,-1);i.length&&t.setActiveOption(i,!0,!0)}return void e.preventDefault();case a:return void(t.isOpen&&t.$activeOption&&(t.onOptionSelect({currentTarget:t.$activeOption}),e.preventDefault()));case u:return void t.advanceSelection(-1,e);case d:return void t.advanceSelection(1,e);case O:return t.settings.selectOnTab&&t.isOpen&&t.$activeOption&&(t.onOptionSelect({currentTarget:t.$activeOption}),t.isFull()||e.preventDefault()),void(t.settings.create&&t.createItem()&&e.preventDefault());case f:case v:return void t.deleteSelection(e)}return!t.isFull()&&!t.isInputHidden||(r?e.metaKey:e.ctrlKey)?void 0:void e.preventDefault()},onKeyUp:function(e){var t=this;if(t.isLocked)return e&&e.preventDefault();var n=t.$control_input.val()||"";t.lastValue!==n&&(t.lastValue=n,t.onSearchChange(n),t.refreshOptions(),t.trigger("type",n))},onSearchChange:function(e){var t=this,n=t.settings.load;n&&(t.loadedSearches.hasOwnProperty(e)||(t.loadedSearches[e]=!0,t.load(function(i){n.apply(t,[e,i])})))},onFocus:function(e){var t=this,n=t.isFocused;return t.isDisabled?(t.blur(),e&&e.preventDefault(),!1):void(t.ignoreFocus||(t.isFocused=!0,"focus"===t.settings.preload&&t.onSearchChange(""),n||t.trigger("focus"),t.$activeItems.length||(t.showInput(),t.setActiveItem(null),t.refreshOptions(!!t.settings.openOnFocus)),t.refreshState()))},onBlur:function(e,t){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(e);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),(t||document.body).focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(e){this.ignoreHover||this.setActiveOption(e.currentTarget,!1)},onOptionSelect:function(t){var n,i,o=this;t.preventDefault&&(t.preventDefault(),t.stopPropagation()),i=e(t.currentTarget),i.hasClass("create")?o.createItem(null,function(){o.settings.closeAfterSelect&&o.close()}):(n=i.attr("data-value"),"undefined"!=typeof n&&(o.lastQuery=null,o.setTextboxValue(""),o.addItem(n),o.settings.closeAfterSelect?o.close():!o.settings.hideSelected&&t.type&&/mouse/.test(t.type)&&o.setActiveOption(o.getOption(n))))},onItemSelect:function(e){var t=this;t.isLocked||"multi"===t.settings.mode&&(e.preventDefault(),t.setActiveItem(e.currentTarget,e))},load:function(e){var t=this,n=t.$wrapper.addClass(t.settings.loadingClass);t.loading++,e.apply(t,[function(e){t.loading=Math.max(t.loading-1,0),e&&e.length&&(t.addOption(e),t.refreshOptions(t.isFocused&&!t.isInputHidden)),t.loading||n.removeClass(t.settings.loadingClass),t.trigger("load",e)}])},setTextboxValue:function(e){var t=this.$control_input,n=t.val()!==e;n&&(t.val(e).triggerHandler("update"),this.lastValue=e)},getValue:function(){return this.tagType===$&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(e,t){var n=t?[]:["change"];A(this,n,function(){this.clear(t),this.addItems(e,t)})},setActiveItem:function(t,n){var i,o,r,s,a,l,u,p,c=this;if("single"!==c.settings.mode){if(t=e(t),!t.length)return e(c.$activeItems).removeClass("active"),c.$activeItems=[],void(c.isFocused&&c.showInput());if(i=n&&n.type.toLowerCase(),"mousedown"===i&&c.isShiftDown&&c.$activeItems.length){for(p=c.$control.children(".active:last"),s=Array.prototype.indexOf.apply(c.$control[0].childNodes,[p[0]]),a=Array.prototype.indexOf.apply(c.$control[0].childNodes,[t[0]]),s>a&&(u=s,s=a,a=u),o=s;a>=o;o++)l=c.$control[0].childNodes[o],-1===c.$activeItems.indexOf(l)&&(e(l).addClass("active"),c.$activeItems.push(l));n.preventDefault()}else"mousedown"===i&&c.isCtrlDown||"keydown"===i&&this.isShiftDown?t.hasClass("active")?(r=c.$activeItems.indexOf(t[0]),c.$activeItems.splice(r,1),t.removeClass("active")):c.$activeItems.push(t.addClass("active")[0]):(e(c.$activeItems).removeClass("active"),c.$activeItems=[t.addClass("active")[0]]);c.hideInput(),this.isFocused||c.focus()}},setActiveOption:function(t,n,i){var o,r,s,a,l,u=this;u.$activeOption&&u.$activeOption.removeClass("active"),u.$activeOption=null,t=e(t),t.length&&(u.$activeOption=t.addClass("active"),(n||!x(n))&&(o=u.$dropdown_content.height(),r=u.$activeOption.outerHeight(!0),n=u.$dropdown_content.scrollTop()||0,s=u.$activeOption.offset().top-u.$dropdown_content.offset().top+n,a=s,l=s-o+r,s+r>o+n?u.$dropdown_content.stop().animate({scrollTop:l},i?u.settings.scrollDuration:0):n>s&&u.$dropdown_content.stop().animate({scrollTop:a},i?u.settings.scrollDuration:0)))},selectAll:function(){var e=this;"single"!==e.settings.mode&&(e.$activeItems=Array.prototype.slice.apply(e.$control.children(":not(input)").addClass("active")),e.$activeItems.length&&(e.hideInput(),e.close()),e.focus())},hideInput:function(){var e=this;e.setTextboxValue(""),e.$control_input.css({opacity:0,position:"absolute",left:e.rtl?1e4:-1e4}),e.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var e=this;e.isDisabled||(e.ignoreFocus=!0,e.$control_input[0].focus(),window.setTimeout(function(){e.ignoreFocus=!1,e.onFocus()},0))},blur:function(e){this.$control_input[0].blur(),this.onBlur(null,e)},getScoreFunction:function(e){return this.sifter.getScoreFunction(e,this.getSearchOptions())},getSearchOptions:function(){var e=this.settings,t=e.sortField;return"string"==typeof t&&(t=[{field:t}]),{fields:e.searchField,conjunction:e.searchConjunction,sort:t}},search:function(t){var n,i,o,r=this,s=r.settings,a=this.getSearchOptions();if(s.score&&(o=r.settings.score.apply(this,[t]),"function"!=typeof o))throw new Error('Selectize "score" setting must be a function that returns a function');if(t!==r.lastQuery?(r.lastQuery=t,i=r.sifter.search(t,e.extend(a,{score:o})),r.currentResults=i):i=e.extend(!0,{},r.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)-1!==r.items.indexOf(S(i.items[n].id))&&i.items.splice(n,1);return i},refreshOptions:function(t){var n,o,r,s,a,l,u,p,c,d,h,g,f,v,m,y;"undefined"==typeof t&&(t=!0);var w=this,O=e.trim(w.$control_input.val()),$=w.search(O),C=w.$dropdown_content,b=w.$activeOption&&S(w.$activeOption.attr("data-value"));for(s=$.items.length,"number"==typeof w.settings.maxOptions&&(s=Math.min(s,w.settings.maxOptions)),a={},l=[],n=0;s>n;n++)for(u=w.options[$.items[n].id],p=w.render("option",u),c=u[w.settings.optgroupField]||"",d=e.isArray(c)?c:[c],o=0,r=d&&d.length;r>o;o++)c=d[o],w.optgroups.hasOwnProperty(c)||(c=""),a.hasOwnProperty(c)||(a[c]=[],l.push(c)),a[c].push(p);for(this.settings.lockOptgroupOrder&&l.sort(function(e,t){var n=w.optgroups[e].$order||0,i=w.optgroups[t].$order||0;return n-i}),h=[],n=0,s=l.length;s>n;n++)c=l[n],w.optgroups.hasOwnProperty(c)&&a[c].length?(g=w.render("optgroup_header",w.optgroups[c])||"",g+=a[c].join(""),h.push(w.render("optgroup",e.extend({},w.optgroups[c],{html:g})))):h.push(a[c].join(""));if(C.html(h.join("")),w.settings.highlight&&$.query.length&&$.tokens.length)for(n=0,s=$.tokens.length;s>n;n++)i(C,$.tokens[n].regex);if(!w.settings.hideSelected)for(n=0,s=w.items.length;s>n;n++)w.getOption(w.items[n]).addClass("selected");f=w.canCreate(O),f&&(C.prepend(w.render("option_create",{input:O})),y=e(C[0].childNodes[0])),w.hasOptions=$.items.length>0||f,w.hasOptions?($.items.length>0?(m=b&&w.getOption(b),m&&m.length?v=m:"single"===w.settings.mode&&w.items.length&&(v=w.getOption(w.items[0])),v&&v.length||(v=y&&!w.settings.addPrecedence?w.getAdjacentOption(y,1):C.find("[data-selectable]:first"))):v=y,w.setActiveOption(v),t&&!w.isOpen&&w.open()):(w.setActiveOption(null),t&&w.isOpen&&w.close())},addOption:function(t){var n,i,o,r=this;if(e.isArray(t))for(n=0,i=t.length;i>n;n++)r.addOption(t[n]);else(o=r.registerOption(t))&&(r.userOptions[o]=!0,r.lastQuery=null,r.trigger("option_add",o,t))},registerOption:function(e){var t=S(e[this.settings.valueField]);return!t||this.options.hasOwnProperty(t)?!1:(e.$order=e.$order||++this.order,this.options[t]=e,t)},registerOptionGroup:function(e){var t=S(e[this.settings.optgroupValueField]);return t?(e.$order=e.$order||++this.order,this.optgroups[t]=e,t):!1},addOptionGroup:function(e,t){t[this.settings.optgroupValueField]=e,(e=this.registerOptionGroup(t))&&this.trigger("optgroup_add",e,t)},removeOptionGroup:function(e){this.optgroups.hasOwnProperty(e)&&(delete this.optgroups[e],this.renderCache={},this.trigger("optgroup_remove",e))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(t,n){var i,o,r,s,a,l,u,p=this;if(t=S(t),r=S(n[p.settings.valueField]),null!==t&&p.options.hasOwnProperty(t)){if("string"!=typeof r)throw new Error("Value must be set in option data");u=p.options[t].$order,r!==t&&(delete p.options[t],s=p.items.indexOf(t),-1!==s&&p.items.splice(s,1,r)),n.$order=n.$order||u,p.options[r]=n,a=p.renderCache.item,l=p.renderCache.option,a&&(delete a[t],delete a[r]),l&&(delete l[t],delete l[r]),-1!==p.items.indexOf(r)&&(i=p.getItem(t),o=e(p.render("item",n)),i.hasClass("active")&&o.addClass("active"),i.replaceWith(o)),p.lastQuery=null,p.isOpen&&p.refreshOptions(!1)}},removeOption:function(e,t){var n=this;e=S(e);var i=n.renderCache.item,o=n.renderCache.option;i&&delete i[e],o&&delete o[e],delete n.userOptions[e],delete n.options[e],n.lastQuery=null,n.trigger("option_remove",e),n.removeItem(e,t)},clearOptions:function(){var e=this;e.loadedSearches={},e.userOptions={},e.renderCache={},e.options=e.sifter.items={},e.lastQuery=null,e.trigger("option_clear"),e.clear()},getOption:function(e){return this.getElementWithValue(e,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(t,n){var i=this.$dropdown.find("[data-selectable]"),o=i.index(t)+n;return o>=0&&o<i.length?i.eq(o):e()},getElementWithValue:function(t,n){if(t=S(t),"undefined"!=typeof t&&null!==t)for(var i=0,o=n.length;o>i;i++)if(n[i].getAttribute("data-value")===t)return e(n[i]);return e()},getItem:function(e){return this.getElementWithValue(e,this.$control.children())},addItems:function(t,n){for(var i=e.isArray(t)?t:[t],o=0,r=i.length;r>o;o++)this.isPending=r-1>o,this.addItem(i[o],n)},addItem:function(t,n){var i=n?[]:["change"];A(this,i,function(){var i,o,r,s,a,l=this,u=l.settings.mode;return t=S(t),-1!==l.items.indexOf(t)?void("single"===u&&l.close()):void(l.options.hasOwnProperty(t)&&("single"===u&&l.clear(n),"multi"===u&&l.isFull()||(i=e(l.render("item",l.options[t])),a=l.isFull(),l.items.splice(l.caretPos,0,t),l.insertAtCaret(i),(!l.isPending||!a&&l.isFull())&&l.refreshState(),l.isSetup&&(r=l.$dropdown_content.find("[data-selectable]"),l.isPending||(o=l.getOption(t),s=l.getAdjacentOption(o,1).attr("data-value"),l.refreshOptions(l.isFocused&&"single"!==u),s&&l.setActiveOption(l.getOption(s))),!r.length||l.isFull()?l.close():l.positionDropdown(),l.updatePlaceholder(),l.trigger("item_add",t,i),l.updateOriginalInput({silent:n})))))})},removeItem:function(e,t){var n,i,o,r=this;n="object"==typeof e?e:r.getItem(e),e=S(n.attr("data-value")),i=r.items.indexOf(e),-1!==i&&(n.remove(),n.hasClass("active")&&(o=r.$activeItems.indexOf(n[0]),r.$activeItems.splice(o,1)),r.items.splice(i,1),r.lastQuery=null,!r.settings.persist&&r.userOptions.hasOwnProperty(e)&&r.removeOption(e,t),i<r.caretPos&&r.setCaret(r.caretPos-1),r.refreshState(),r.updatePlaceholder(),r.updateOriginalInput({silent:t}),r.positionDropdown(),r.trigger("item_remove",e,n))},createItem:function(t,n){var i=this,o=i.caretPos;t=t||e.trim(i.$control_input.val()||"");var r=arguments[arguments.length-1];if("function"!=typeof r&&(r=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(t))return r(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(e){var t={};return t[i.settings.labelField]=e,t[i.settings.valueField]=e,t},a=D(function(e){if(i.unlock(),!e||"object"!=typeof e)return r();var t=S(e[i.settings.valueField]);return"string"!=typeof t?r():(i.setTextboxValue(""),i.addOption(e),i.setCaret(o),i.addItem(t),i.refreshOptions(n&&"single"!==i.settings.mode),void r(e))}),l=s.apply(this,[t,a]);return"undefined"!=typeof l&&a(l),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){var e,t=this;t.isRequired&&(t.items.length&&(t.isInvalid=!1),t.$control_input.prop("required",e)),t.refreshClasses()},refreshClasses:function(){var t=this,n=t.isFull(),i=t.isLocked;t.$wrapper.toggleClass("rtl",t.rtl),t.$control.toggleClass("focus",t.isFocused).toggleClass("disabled",t.isDisabled).toggleClass("required",t.isRequired).toggleClass("invalid",t.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",t.isFocused&&!t.isInputHidden).toggleClass("dropdown-active",t.isOpen).toggleClass("has-options",!e.isEmptyObject(t.options)).toggleClass("has-items",t.items.length>0),t.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(e){var t,n,i,o,r=this;if(e=e||{},r.tagType===$){for(i=[],t=0,n=r.items.length;n>t;t++)o=r.options[r.items[t]][r.settings.labelField]||"",i.push('<option value="'+I(r.items[t])+'" selected="selected">'+I(o)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),r.$input.html(i.join(""))}else r.$input.val(r.getValue()),r.$input.attr("value",r.$input.val());r.isSetup&&(e.silent||r.trigger("change",r.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){var e=this.$control_input;this.items.length?e.removeAttr("placeholder"):e.attr("placeholder",this.settings.placeholder),e.triggerHandler("update",{force:!0})}},open:function(){var e=this;e.isLocked||e.isOpen||"multi"===e.settings.mode&&e.isFull()||(e.focus(),e.isOpen=!0,e.refreshState(),e.$dropdown.css({visibility:"hidden",display:"block"}),e.positionDropdown(),e.$dropdown.css({visibility:"visible"}),e.trigger("dropdown_open",e.$dropdown))},close:function(){var e=this,t=e.isOpen;"single"===e.settings.mode&&e.items.length&&e.hideInput(),e.isOpen=!1,e.$dropdown.hide(),e.setActiveOption(null),e.refreshState(),t&&e.trigger("dropdown_close",e.$dropdown)},positionDropdown:function(){var e=this.$control,t="body"===this.settings.dropdownParent?e.offset():e.position();t.top+=e.outerHeight(!0),this.$dropdown.css({width:e.outerWidth(),top:t.top,left:t.left})},clear:function(e){var t=this;t.items.length&&(t.$control.children(":not(input)").remove(),t.items=[],t.lastQuery=null,t.setCaret(0),t.setActiveItem(null),t.updatePlaceholder(),t.updateOriginalInput({silent:e}),t.refreshState(),t.showInput(),t.trigger("clear"))},insertAtCaret:function(t){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(t):e(this.$control[0].childNodes[n]).before(t),this.setCaret(n+1)},deleteSelection:function(t){var n,i,o,r,s,a,l,u,p,c=this;if(o=t&&t.keyCode===f?-1:1,r=z(c.$control_input[0]),c.$activeOption&&!c.settings.hideSelected&&(l=c.getAdjacentOption(c.$activeOption,-1).attr("data-value")),s=[],c.$activeItems.length){for(p=c.$control.children(".active:"+(o>0?"last":"first")),
a=c.$control.children(":not(input)").index(p),o>0&&a++,n=0,i=c.$activeItems.length;i>n;n++)s.push(e(c.$activeItems[n]).attr("data-value"));t&&(t.preventDefault(),t.stopPropagation())}else(c.isFocused||"single"===c.settings.mode)&&c.items.length&&(0>o&&0===r.start&&0===r.length?s.push(c.items[c.caretPos-1]):o>0&&r.start===c.$control_input.val().length&&s.push(c.items[c.caretPos]));if(!s.length||"function"==typeof c.settings.onDelete&&c.settings.onDelete.apply(c,[s])===!1)return!1;for("undefined"!=typeof a&&c.setCaret(a);s.length;)c.removeItem(s.pop());return c.showInput(),c.positionDropdown(),c.refreshOptions(!0),l&&(u=c.getOption(l),u.length&&c.setActiveOption(u)),!0},advanceSelection:function(e,t){var n,i,o,r,s,a,l=this;0!==e&&(l.rtl&&(e*=-1),n=e>0?"last":"first",i=z(l.$control_input[0]),l.isFocused&&!l.isInputHidden?(r=l.$control_input.val().length,s=0>e?0===i.start&&0===i.length:i.start===r,s&&!r&&l.advanceCaret(e,t)):(a=l.$control.children(".active:"+n),a.length&&(o=l.$control.children(":not(input)").index(a),l.setActiveItem(null),l.setCaret(e>0?o+1:o))))},advanceCaret:function(e,t){var n,i,o=this;0!==e&&(n=e>0?"next":"prev",o.isShiftDown?(i=o.$control_input[n](),i.length&&(o.hideInput(),o.setActiveItem(i),t&&t.preventDefault())):o.setCaret(o.caretPos+e))},setCaret:function(t){var n=this;if(t="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,t)),!n.isPending){var i,o,r,s;for(r=n.$control.children(":not(input)"),i=0,o=r.length;o>i;i++)s=e(r[i]).detach(),t>i?n.$control_input.before(s):n.$control.append(s)}n.caretPos=t},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var e=this;e.$input.prop("disabled",!0),e.$control_input.prop("disabled",!0).prop("tabindex",-1),e.isDisabled=!0,e.lock()},enable:function(){var e=this;e.$input.prop("disabled",!1),e.$control_input.prop("disabled",!1).prop("tabindex",e.tabIndex),e.isDisabled=!1,e.unlock()},destroy:function(){var t=this,n=t.eventNS,i=t.revertSettings;t.trigger("destroy"),t.off(),t.$wrapper.remove(),t.$dropdown.remove(),t.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),t.$control_input.removeData("grow"),t.$input.removeData("selectize"),e(window).off(n),e(document).off(n),e(document.body).off(n),delete t.$input[0].selectize},render:function(e,t){var n,i,o="",r=!1,s=this,a=/^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;return("option"===e||"item"===e)&&(n=S(t[s.settings.valueField]),r=!!n),r&&(x(s.renderCache[e])||(s.renderCache[e]={}),s.renderCache[e].hasOwnProperty(n))?s.renderCache[e][n]:(o=s.settings.render[e].apply(this,[t,I]),("option"===e||"option_create"===e)&&(o=o.replace(a,"<$1 data-selectable")),"optgroup"===e&&(i=t[s.settings.optgroupValueField]||"",o=o.replace(a,'<$1 data-group="'+_(I(i))+'"')),("option"===e||"item"===e)&&(o=o.replace(a,'<$1 data-value="'+_(I(n||""))+'"')),r&&(s.renderCache[e][n]=o),o)},clearCache:function(e){var t=this;"undefined"==typeof e?t.renderCache={}:delete t.renderCache[e]},canCreate:function(e){var t=this;if(!t.settings.create)return!1;var n=t.settings.createFilter;return e.length&&("function"!=typeof n||n.apply(t,[e]))&&("string"!=typeof n||new RegExp(n).test(e))&&(!(n instanceof RegExp)||n.test(e))}}),E.count=0,E.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},e.fn.selectize=function(t){var n=e.fn.selectize.defaults,i=e.extend({},n,t),o=i.dataAttr,r=i.labelField,s=i.valueField,a=i.optgroupField,l=i.optgroupLabelField,u=i.optgroupValueField,p=function(t,n){var a,l,u,p,c=t.attr(o);if(c)for(n.options=JSON.parse(c),a=0,l=n.options.length;l>a;a++)n.items.push(n.options[a][s]);else{var d=e.trim(t.val()||"");if(!i.allowEmptyOption&&!d.length)return;for(u=d.split(i.delimiter),a=0,l=u.length;l>a;a++)p={},p[r]=u[a],p[s]=u[a],n.options.push(p);n.items=u}},c=function(t,n){var p,c,d,h,g=n.options,f={},v=function(e){var t=o&&e.attr(o);return"string"==typeof t&&t.length?JSON.parse(t):null},m=function(t,o){t=e(t);var l=S(t.attr("value"));if(l||i.allowEmptyOption)if(f.hasOwnProperty(l)){if(o){var u=f[l][a];u?e.isArray(u)?u.push(o):f[l][a]=[u,o]:f[l][a]=o}}else{var p=v(t)||{};p[r]=p[r]||t.text(),p[s]=p[s]||l,p[a]=p[a]||o,f[l]=p,g.push(p),t.is(":selected")&&n.items.push(l)}},y=function(t){var i,o,r,s,a;for(t=e(t),r=t.attr("label"),r&&(s=v(t)||{},s[l]=r,s[u]=r,n.optgroups.push(s)),a=e("option",t),i=0,o=a.length;o>i;i++)m(a[i],r)};for(n.maxItems=t.attr("multiple")?null:1,h=t.children(),p=0,c=h.length;c>p;p++)d=h[p].tagName.toLowerCase(),"optgroup"===d?y(h[p]):"option"===d&&m(h[p])};return this.each(function(){if(!this.selectize){var o,r=e(this),s=this.tagName.toLowerCase(),a=r.attr("placeholder")||r.attr("data-placeholder");a||i.allowEmptyOption||(a=r.children('option[value=""]').text());var l={placeholder:a,options:[],optgroups:[],items:[]};"select"===s?c(r,l):p(r,l),o=new E(r,e.extend(!0,{},n,l,t))}})},e.fn.selectize.defaults=E.defaults,e.fn.selectize.support={validity:b},E.define("drag_drop",function(t){if(!e.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var e=n.lock;return function(){var t=n.$control.data("sortable");return t&&t.disable(),e.apply(n,arguments)}}(),n.unlock=function(){var e=n.unlock;return function(){var t=n.$control.data("sortable");return t&&t.enable(),e.apply(n,arguments)}}(),n.setup=function(){var t=n.setup;return function(){t.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(e,t){t.placeholder.css("width",t.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var t=n.$activeItems?n.$activeItems.slice():null,o=[];i.children("[data-value]").each(function(){o.push(e(this).attr("data-value"))}),n.setValue(o),n.setActiveItem(t)}})}}()}}),E.define("dropdown_header",function(t){var n=this;t=e.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(e){return'<div class="'+e.headerClass+'"><div class="'+e.titleRowClass+'"><span class="'+e.labelClass+'">'+e.title+'</span><a href="javascript:void(0)" class="'+e.closeClass+'">&times;</a></div></div>'}},t),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=e(t.html(t)),n.$dropdown.prepend(n.$dropdown_header)}}()}),E.define("optgroup_columns",function(t){var n=this;t=e.extend({equalizeWidth:!0,equalizeHeight:!0},t),this.getAdjacentOption=function(t,n){var i=t.closest("[data-group]").find("[data-selectable]"),o=i.index(t)+n;return o>=0&&o<i.length?i.eq(o):e()},this.onKeyDown=function(){var e=n.onKeyDown;return function(t){var i,o,r,s;return!this.isOpen||t.keyCode!==u&&t.keyCode!==d?e.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=t.keyCode===u?s.prev("[data-group]"):s.next("[data-group]"),r=s.find("[data-selectable]"),o=r.eq(Math.min(r.length-1,i)),void(o.length&&this.setActiveOption(o)))}}();var i=function(){var e,t=i.width,n=document;return"undefined"==typeof t&&(e=n.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,n.body.appendChild(e),t=i.width=e.offsetWidth-e.clientWidth,n.body.removeChild(e)),t},o=function(){var o,r,s,a,l,u,p;if(p=e("[data-group]",n.$dropdown_content),r=p.length,r&&n.$dropdown_content.width()){if(t.equalizeHeight){for(s=0,o=0;r>o;o++)s=Math.max(s,p.eq(o).height());p.css({height:s})}t.equalizeWidth&&(u=n.$dropdown_content.innerWidth()-i(),a=Math.round(u/r),p.css({width:a}),r>1&&(l=u-a*(r-1),p.eq(r-1).css({width:l})))}};(t.equalizeHeight||t.equalizeWidth)&&(F.after(this,"positionDropdown",o),F.after(this,"refreshOptions",o))}),E.define("remove_button",function(t){if("single"!==this.settings.mode){t=e.extend({label:"&times;",title:"Remove",className:"remove",append:!0},t);var n=this,i='<a href="javascript:void(0)" class="'+t.className+'" tabindex="-1" title="'+I(t.title)+'">'+t.label+"</a>",o=function(e,t){var n=e.search(/(<\/[^>]+>\s*)$/);return e.substring(0,n)+t+e.substring(n)};this.setup=function(){var r=n.setup;return function(){if(t.append){var s=n.settings.render.item;n.settings.render.item=function(e){return o(s.apply(this,arguments),i)}}r.apply(this,arguments),this.$control.on("click","."+t.className,function(t){if(t.preventDefault(),!n.isLocked){var i=e(t.currentTarget).parent();n.setActiveItem(i),n.deleteSelection()&&n.setCaret(n.items.length)}})}}()}}),E.define("restore_on_backspace",function(e){var t=this;e.text=e.text||function(e){return e[this.settings.labelField]},this.onKeyDown=function(){var n=t.onKeyDown;return function(t){var i,o;return t.keyCode===f&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1,i>=0&&i<this.items.length)?(o=this.options[this.items[i]],this.deleteSelection(t)&&(this.setTextboxValue(e.text.apply(this,[o])),this.refreshOptions(!0)),void t.preventDefault()):n.apply(this,arguments)}}()}),E});
var AwesomePanel=function(e){"use strict";var n=jQuery,a=this,o=n("body");a.item_id=e.item_id,a.model_name=e.model_name,a.options=e,a.overlayvisible=1,a.parent="#wpcontent",a.panel=n("#a-slide-panel"),a.overlay=n("<div></div>").addClass("panel-overlay"),a.html=e.html,a.spinner=a.panel.find("#a-slide-panel-spinner"),a.direction=e.direction||"left",a.width=e.width||"33%",a.height=e.height||"100%",a.animation_start=function(){a.spinner.addClass("fade-animation-in")},a.animation_end=function(){a.spinner.removeClass("fade-animation-in")},a.hide_content=function(){a.panel.find(".a-slide-panel-content-wrapper").removeClass("fade-animation-in")},a.show_content=function(){a.panel.find(".a-slide-panel-content-wrapper").addClass("fade-animation-in")},a.open=function(){a.overlay.bind("click",function(){a.overlayvisible&&a.close(),a.overlayvisible=0}),n(a.parent).append(a.overlay);var e=n(a.html);a.panel.append(e),a.hide_content(),a.animation_start(),n(a.parent).append(a.panel),a.panel.attr("class","a-slide-panel"),a.panel.css("width",a.width),a.panel.css("height",a.height),a.panel.addClass("a-slide-to-"+a.direction),setTimeout(function(){a.panel.addClass("a-slide-panel-active"),n(a.overlay).addClass("open"),o.css("overflow","hidden"),n("html,body").animate({scrollTop:0},200)},1)},a.close=function(){n.browser.msie&&parseInt(n.browser.version,10)<=9?n(a.overlay).remove():n(a.parent).find(a.overlay).one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(){n(a.overlay).remove()}).addClass("remove-overlay"),a.panel.removeClass("a-slide-panel-active"),o.css("overflow",""),a.hide_content(),n("#panel-html-pool").append(n(a.html)),"function"==typeof a.options.callback_close&&a.options.callback_close()},a.loadModel=function(){var e=new AwesomeAjax,o=null;if(n.isNumeric(a.item_id))return o=e.load_model(a.model_name,a.item_id),void o.then(function(e){var o=wpAjax.parseAjaxResponse(e,"ajax-form-result"),i=n.parseJSON(o.responses[0].data);window.model=new AwesomeModel(i),a.appendHtml()});if("#"==a.item_id){if("team"==a.model_name)return o=e.load_team_defaults(a.model_name),void o.then(function(e){var o=wpAjax.parseAjaxResponse(e,"ajax-form-result"),i=n.parseJSON(o.responses[0].data);window.model=new AwesomeModel(i),a.appendHtml()});if("employer"==a.model_name)return window.model=new AwesomeModel,void a.appendHtml()}window.model={},a.appendHtml()},a.appendHtml=function(){a.animation_end(),a.show_content(),"function"==typeof a.options.callback_open&&a.options.callback_open()},a.bindActions=function(){n(".close-panel").on("click",function(){a.close()})},a.init=function(){a.open(),a.bindActions(),a.loadModel()}};
var AwesomeDrag=function(){"use strict";var e=jQuery,l=this;l.sortableEl=".connected-sortable",l.employers_panel="#panel-employers",l.cloneEmployers=function(){var t=e(l.employers_panel).clone().removeAttr("id").attr("panel","employers-clone").addClass("at-transition");setTimeout(function(){e(l.employers_panel).fadeOut()},100);var o=t.find("li"),s=model.get("employers")||[];e.each(o,function(){var l=parseInt(e(this).attr("employer-id"));find_in_array_of_objects(s,"ID",l)&&e(this,t).remove()}),e("#a-slide-panel .employers-list").html(t),e(document).on("mouseenter",".panel-pop-up #employers-list",function(){e("#a-slide-panel #team-sortable").addClass("pulsate")}),e(document).on("mouseleave",".panel-pop-up #employers-list",function(){e("#a-slide-panel #team-sortable").removeClass("pulsate")})},l.initSortable=function(){e(l.sortableEl).addClass("sortable-placeholder"),e("#team-sortable, #employers-list").sortable({appendTo:"body",connectWith:l.sortableEl,forcePlaceholderSize:!0,placeholder:"sortable-placeholder-inner",cursor:"move",cursorAt:{top:25,left:25},helper:function(l,t){var o=e(t).find(".foto").clone(),s=e('<li class="item"></li>').append(o);return s},create:function(e,l){},start:function(l,t){t.placeholder.height("0"),e(t.helper).addClass("pop-up"),e(".a-slide-panel #team-sortable").addClass("drop-highlight")},stop:function(){e(".a-slide-panel #team-sortable").removeClass("drop-highlight")},update:function(t,o){l.updateElelemnts(),e(o.item).attr("style","")}})},l.updateElelemnts=function(){var l=e("#a-slide-panel #team-employers");l.val("");var t=[],o=[];e("#a-slide-panel #team-sortable li").each(function(){var l=parseInt(e(this).attr("employer-id")),s=e(this).find("img").attr("src"),a=e(this).find(".name").html(),n=e(this).find(".position").html(),r=e(this).find(".teams_count").html();o.push(l),t.push({ID:l,foto:s,post_title:a,position:n,teams_count:r})});var s=JSON.stringify(o);l.val(s),model.set("employers_ids",o),model.set("employers",t)},l.destroy=function(){e(l.employers_panel).show(),e(".panel.panel-pop-up").remove(),e(".connected-sortable").removeClass("sortable-placeholder"),e("#employers-list").sortable({disabled:!0}),e("#a-slide-panel .employers-list").html(""),e(".panel-pop-up #employers-list").off(),model.set("employers_ids",[]),model.set("employers",[])},l.init=function(){l.cloneEmployers(),l.updateElelemnts(),l.initSortable()}};
var AwesomeAjax=function(){"use strict";var i=jQuery,l=this,e="/wp-content/plugins/a-team-showcase/admin/img/default-avatar.png";l.result={},l.load_model=function(l,e){return i.ajax({url:ajaxurl,type:"post",data:{action:"get_"+l,data:{id:e}},success:function(i){return i}})},l.load_team_defaults=function(l){return i.ajax({url:ajaxurl,type:"post",data:{action:"get_team_defaults",data:{}},success:function(i){return i}})},l.fill_team_layout_html=function(i,l,e){},l.fill_blocks_order=function(i,l,e){var a=JSON.stringify(e);i.find('[name="team_'+l+'"]').val(a)},l.fill_team_grid_blocks_order=l.fill_blocks_order.bind(l),l.fill_team_table_blocks_order=l.fill_blocks_order.bind(l),l.fill_team_employers=function(l,a,t){var o="",n=[];i.each(t,function(i,l){n.push(l.ID);var a=l.foto?'<img width="40" height="40" src="'+l.foto+'">':'<img src="'+e+'" alt="" />',t='                <li data-action="edit-employer" class="clearfix" employer-id="{ID}" title="{name}">                    <div class="foto" data-wr_replaced="true">                        {foto}                    </div>                    <span class="name">{name}</span>                    <span class="position">{position}</span>                    <div class="teams"><span class="teams_count">{teams_count}</span> Teams</div>                </li>';o+=t.replace_all("{name}",l.post_title).replace_all("{foto}",a).replace_all("{ID}",l.ID).replace_all("{position}",l.position).replace_all("{teams_count}",l.teams_count)}),i(l).find("#team-employers").val(JSON.stringify(n)),i(l).find("#team-sortable").html("").append(o)},l.fill_color=function(l,e,a){e=e.replace_all("team_",""),i(l).find("."+e).find("input").val(a),i(l).find("."+e).find("span.color > i").css("background-color",a)},l.fill_team_button_color=l.fill_color.bind(l),l.fill_team_button_hover_color=l.fill_color.bind(l),l.fill_team_button_text_color=l.fill_color.bind(l),l.fill_team_button_text_hover_color=l.fill_color.bind(l),l.fill_team_base_color=l.fill_color.bind(l),l.fill_team_card_base_color=l.fill_color.bind(l),l.fill_team_card_border_color=l.fill_color.bind(l),l.fill_team_card_divider_color=l.fill_color.bind(l),l.fill_team_card_shadow_color=l.fill_color.bind(l),l.fill_team_card_even_row_color=l.fill_color.bind(l),l.fill_team_photo_shape=function(i,l,e){},l.fill_team_photo_size=function(i,l,e){},l.fill_visibility=function(l,e,a){i(l).find('[name="'+e+'"]').attr("data-checked",a).val(a)},l.fill_team_slider=l.fill_visibility.bind(l),l.fill_team_filter=l.fill_visibility.bind(l),l.fill_team_reveal=l.fill_visibility.bind(l),l.fill_team_body_visible=l.fill_visibility.bind(l),l.fill_team_photo_visible=l.fill_visibility.bind(l),l.fill_team_name_visible=l.fill_visibility.bind(l),l.fill_team_divider_visible=l.fill_visibility.bind(l),l.fill_team_position_visible=l.fill_visibility.bind(l),l.fill_team_short_bio_visible=l.fill_visibility.bind(l),l.fill_team_phone_visible=l.fill_visibility.bind(l),l.fill_team_email_visible=l.fill_visibility.bind(l),l.fill_team_skype_visible=l.fill_visibility.bind(l),l.fill_team_link_visible=l.fill_visibility.bind(l),l.fill_team_social_visible=l.fill_visibility.bind(l),l.fill_employer_foto=function(l,e,a){i("#a-slide-panel #employer-form-foto-remove").show(),""===a&&i("#a-slide-panel #employer-form-foto-remove").hide();var t=i("<img />").attr("src",a);i(l).find("#employer-form-foto").html("").append(t)},l.fill_checkbox=function(l,e,a){i(l).find('[name="'+e+'"]').attr("data-checked",a).val(a)},l.fill_team_filter_bold=l.fill_checkbox.bind(l),l.fill_team_name_bold=l.fill_checkbox.bind(l),l.fill_team_position_bold=l.fill_checkbox.bind(l),l.fill_team_short_bio_bold=l.fill_checkbox.bind(l),l.fill_team_contacts_bold=l.fill_checkbox.bind(l),l.fill_team_filter_italic=l.fill_checkbox.bind(l),l.fill_team_name_italic=l.fill_checkbox.bind(l),l.fill_team_position_italic=l.fill_checkbox.bind(l),l.fill_team_short_bio_italic=l.fill_checkbox.bind(l),l.fill_team_contacts_italic=l.fill_checkbox.bind(l),l.fill_team_layout=function(l,e,a){i(l).find('[name="'+e+'"]').val(a),i(l).find('[name="'+e+'"]').dropdown("update")},l.fill_team_template=function(l,e,a){var t="",o=window.model.get("layout");i.each(window.templates.get(o),function(i,l){t+='<option value="'+i+'">'+l.label+"</option>"}),i(l).find('[name="'+e+'"]').html("").html(t).val(a),i(l).find('[name="'+e+'"]').dropdown("update")},l.fill_team_hover=function(l,e,a){i(l).find('[name="'+e+'"]').val(a),i(l).find('[name="'+e+'"]').dropdown("update")},l.delete_model=function(l,e,a){i.ajax({url:ajaxurl,type:"post",data:{action:"delete_model",data:{id:e,model_name:a}},success:function(e){var t=wpAjax.parseAjaxResponse(e),o=i("#panel-"+a+"s");t.errors||(i.browser.msie&&parseInt(i.browser.version,10)<=9?l.remove():l.one("webkitAnimationEnd oanimationend msAnimationEnd animationend",function(i){l.remove()}).addClass("removed-item"),setTimeout(function(){var l=i("#"+a+"s-list > li").length;if(0===l){var e=o.find(".empty-model");return e.css("display","block").addClass("at-transition"),setTimeout(function(){e.css("visibility","visible").css("opacity","1")},1),void o.find(".panel-heading span").remove()}o.find("> .panel-heading span").html("("+l+")")},500))}})},l.set_employer_photo=function(l,a,t){i.ajax({url:ajaxurl,method:"post",data:{action:"get_team_preview_photo",data:{id:l,size:a}},success:function(i){var l=wpAjax.parseAjaxResponse(i);if(l.errors);else{var a=""!==l.responses[0].data?l.responses[0].data:'<img src="'+e+'"/>';t(a)}}})},l.set_team_employers=function(l,e,a){var t=i.Deferred();return i.ajax({url:ajaxurl,method:"post",data:{action:"get_team_employers_photos",data:{ids:l,size:e}},success:function(i){var l=wpAjax.parseAjaxResponse(i);if(l.errors);else{var e=l.responses[0].data;a(e)}}}).then(function(){t.resolve()}),t},l.get_templates=function(){i.ajax({url:ajaxurl,method:"post",data:{action:"get_templates"},success:function(i){var l=wpAjax.parseAjaxResponse(i);if(l.errors);else{var e=l.responses[0].data;window.templates=new Backbone.NestedModel(JSON.parse(e))}}})},l.init_departments=function(){return i.ajax({url:ajaxurl,method:"post",data:{action:"get_taxonomy_terms",data:{taxonomy:"ats-employer-taxonomy"}},success:function(i){var l=wpAjax.parseAjaxResponse(i);if(l.errors);else{var e=l.responses[0].data;window.ats_employers_taxonomy_terms=JSON.parse(e)}}})}};
var AwesomeForm=function(){"use sctrict";var e=jQuery,l=this;l.clear=function(){l.panel=e("#a-slide-panel"),l.content=l.panel.find(".a-slide-panel-content");var n=e(l.content).find("input, textarea");e.each(n,function(l,n){e(n).val(""),e(n).html("")}),l.panel.find("#team-sortable").html(""),l.panel.find(".alert").html("").attr("class","alert")},l.fill=function(n){l.panel=e("#a-slide-panel");var a=e.Deferred(),t=window.model.get("model");if(!e.isEmptyObject(n)){var i=model.get("fill_rules"),r=new AwesomeAjax;e.each(n,function(n,a){if("object"!=typeof a||a instanceof Array||"styles"!=n){var o=t+"_"+n;if(-1==e.inArray(n,i))return void l.panel.find('[name="'+o+'"]').val("").val(a);if(null!==a){var f="fill_"+o;return void r[f](l.panel,o,a)}}else l.fill(a[model.get("layout")])})}return a.resolve(),a},l.init=function(e){l.clear(),l.fill(e)}};
var AwesomeTooltip=function(t){"use strict";var e=this,o=jQuery,i=o(t.container),a=o(t.content),n=t.direction||"top",l=t.data;e.viewport=o(t.viewport||"#wpbody"),e.args=t,e.replace_tags=function(){var t=a.prop("outerHTML");return o.each(l,function(e,o){t=t.replace_all("{{"+e+"}}",o)}),t},e.show_field=function(t){var e=model.get("styles."+model.get("layout"));o(".model-field",t).hide(),o.each(e,function(e,i){null!==i&&o("."+e,t).show()})},e.open=function(){var t='<div class="a-tooltip-wrapper at-transition at-transition-fast" data-field="##field##">            <div class="a-tooltip a-tooltip-arrow">            <div class="a-tooltip-content">            ##content##            </div>            </div>            </div>',a=e.replace_tags();a=t.replace(/##content##/g,a),a=a.replace(/##field##/g,l.field_name);var r=o(a);if(i.append(r),"undefined"!=typeof window.model&&e.show_field(r),e.args.center){var d=(o("#a-slide-panel").width()-r.width())/2-30;r.css("left",d+"px")}0!==r.length&&r.addClass("tooltip-"+n)},e.destroy=function(){i.find(".a-tooltip-wrapper").remove()},e.init=function(){e.open()}};
!function(e){"use strict";e(function(){function t(){e('#a-slide-panel [name="team_template"]').on("change",function(t){var a=model.get("layout"),n=e(this).val();model.set("styles."+a,templates.get(a)[n].styles),model.set("styles."+a+".template",n),preview.destroy(),preview.init()})}function a(){e('#a-slide-panel [name="team_layout"]').on("change",function(t){model.set("layout",e(this).val()),preview.destroy(),preview.init()})}function n(){window.preview=new AwesomeTeam,preview.init().done(function(){a(),t()}),c.init(),e('#a-slide-panel [data-action="shortcode-team"]').hide()}function o(){window.preview=new AwesomeTeam,preview.init().done(function(){a(),t()}),c.init(),s()}function i(){preview.destroy(),c.destroy(),e("#a-slide-panel select").dropdown("destroy")}function d(t){var a=e.Deferred();t=JSON.parse(t);var n=model.get("employers_ids"),o=e('#teams-list li[team-id="'+model.get("id")+'"] .team-members');return e.each(n,function(e,a){o.append('<li><div class="foto">'+t[e]+"</div>")}),a.resolve(),a}function l(){var t=e.Deferred(),a=model.get("employers_ids"),n=new AwesomeAjax,o=e('#teams-list li[team-id="'+model.get("id")+'"] .team-members');return o.find('li[class!="empty"]').remove(),a.length>0?n.set_team_employers(a,"a-thumbnail",d).then(function(){t.resolve()}):t.resolve(),e('#teams-list li[team-id="'+model.get("id")+'"] span.name').html(model.get("name")),t}function s(){var t=model.get("id");if(0!==t){var a='[a-team-showcase id="'+t+'"]';e('#a-slide-panel [data-action="shortcode-team"]').find("input").val(a),e('#a-slide-panel [data-action="shortcode-team"]').show()}}var r="team",c=new AwesomeDrag;e('[data-action="add-team"]').on("click",function(){var e={html:"#team-add-wrap",item_id:"#",model_name:r,direction:"right",width:"100%",callback_open:n,callback_close:i};window.panel=new AwesomePanel(e),panel.init()}),e('[data-action="edit-team"]').on("click",function(){var t=e(this).parents("li[team-id]"),a=parseInt(e(t).attr("team-id")),n={html:"#team-edit-wrap",item_id:a,model_name:r,direction:"right",width:"100%",callback_open:o,callback_close:i};window.panel=new AwesomePanel(n),panel.init()}),e("#team-edit-wrap .save-panel, #team-add-wrap .save-panel").on("click",function(){if(window.model.locked)return!1;var t=e(this).parents("#a-slide-panel"),a=(t.find(".a-slide-panel-content-wrapper"),t.find('[data-type="form"]')),n=e(a).attr("data-model"),o=a.find(".alert");e(o).attr("class","alert").hide(),window.model.locked=!0,window.panel.hide_content(),window.panel.animation_start(),e.ajax({url:ajaxurl,type:"post",data:{action:"update_or_new_"+n,data:{data:window.model.toJSON()}},success:function(t){var a=wpAjax.parseAjaxResponse(t);if(a.errors){var n="";e.each(a.responses[0].errors,function(e,t){n+="<p>",n+=t.message,n+="</p>"}),e(o).addClass("alert-warning").show().html(n),window.panel.show_content(),window.panel.animation_end(),window.model.locked=!1}else{var i=a.responses[0].data;window.model.set("id",i),s(),l().then(function(){window.panel.show_content(),window.panel.animation_end(),window.model.locked=!1})}},error:function(t){e(o).addClass("alert-warning").show().html(t),window.model.locked=!1}})}),e('[data-action="delete-team"]').on("click",function(){var t=e(this).parents("li[team-id]"),a=e(this).find(".a-spinner"),n=e(this).find("svg"),o=parseInt(t.attr("team-id")),i=r,d=new AwesomeAjax;confirm("You really want to delete team?")&&(n.hide(),a.show(),d.delete_model(t,o,i))}),e('[data-action="shortcode-team"]').on({mouseenter:function(){var t=e(this).find(".a-tooltip-wrapper");setTimeout(function(){t.find("input").select()},300)},mouseleave:function(){e(this).find(".a-tooltip-wrapper")}}),e('[data-action="random-team-style"]').on("click",function(){var t=["base","card_base","card_border","card_divider","card_shadow","card_even_row","name","position","short_bio","contacts","social"];model.random(),e.each(t,function(e,t){var a=t+"_color",n=model.get("layout");m(a,model.get("styles."+n+"."+a))})});var m=function(e,t){("phone_color"==e||"email_color"==e||"skype_color"==e)&&(e="contacts_color"),"object"==typeof window["colorpicker_"+e]&&window["colorpicker_"+e].colorpicker("setValue",t)};e('[data-action="modal"]').lightbox({minWidth:50,minHeight:100}),e('[data-toggle="collapse"]').on("click",function(){var t=e(this).parents("#a-slide-panel"),a=e(this).attr("data-target");e(a,t).toggleClass("in")})})}(jQuery);
!function(e){"use strict";e(function(){function n(){e("#a-slide-panel #employer-form-foto-remove").hide(),window.preview=new AwesomeEmployer,preview.init();var n=new AwesomeAjax;n.init_departments().done(function(){window.selectize_instance=e('#a-slide-panel [name="employer_department"]').selectize({plugins:["restore_on_backspace","remove_button"],delimiter:",",addPrecedence:!1,options:ats_employers_taxonomy_terms||[],items:[],valueField:"name",labelField:"name",searchField:"name",preload:!0,create:function(e){return{value:e,name:e}},render:{option:function(e,n){return"<div>"+n(e.name)+"</div>"}},load:function(n,a){return n.length?void e.ajax({url:ajaxurl,method:"post",data:{action:"get_taxonomy_terms",data:{taxonomy:"ats-employer-taxonomy",query:n}},error:function(){a()},success:function(e){var n=wpAjax.parseAjaxResponse(e);if(n.errors);else{var t=JSON.parse(n.responses[0].data);a(t)}}}):a()}})})}function a(){"undefined"!=typeof selectize_instance[0].selectize&&selectize_instance[0].selectize.destroy()}function t(n){e('#employers-list li[employer-id="'+model.get("id")+'"] .foto').html(n)}function o(){var n=model.get("id"),a=new AwesomeAjax;a.set_employer_photo(n,"thumbnail",t),e('#employers-list li[employer-id="'+n+'"] span.name').html(model.get("name")),e('#employers-list li[employer-id="'+n+'"] span.position').html(model.get("position"))}var i="employer";e('[data-action="add-employer"]').on("click",function(){var e={html:"#employer-add-wrap",item_id:"#",model_name:i,direction:"right",width:"67%",callback_open:n,callback_close:a};window.panel=new AwesomePanel(e),panel.init()}),e('[data-action="edit-employer"]').on("click",function(t){var o=parseInt(e(this).attr("employer-id"));if("delete-employer"!==e(t.target).parents("button").attr("class")&&"delete-employer"!==e(t.target).attr("class")){var l={html:"#employer-edit-wrap",item_id:o,model_name:i,direction:"right",width:"67%",callback_open:n,callback_close:a};window.panel=new AwesomePanel(l),panel.init()}}),e("#employer-edit-wrap .save-panel, #employer-add-wrap .save-panel").on("click",function(){var n=e(this).parents("#a-slide-panel"),a=(n.find(".a-slide-panel-content-wrapper"),n.find('[data-type="form"]')),t=e(a).attr("data-model"),i=a.find(".alert");e(i).attr("class","alert").hide(),window.panel.hide_content(),window.panel.animation_start(),e.ajax({url:ajaxurl,type:"post",data:{action:"update_or_new_"+t,data:{data:window.model.toJSON()}},success:function(n){var a=wpAjax.parseAjaxResponse(n);if(a.errors){var t="";e.each(a.responses[0].errors,function(e,n){t+="<p>",t+=n.message,t+="</p>"}),e(i).addClass("alert-warning").show().html(t),window.panel.show_content(),window.panel.animation_end()}else{var l=a.responses[0].data;window.model.set("id",l),o(),window.panel.show_content(),window.panel.animation_end()}},error:function(n){e(i).addClass("alert-warning").show().html(n),window.panel.show_content(),window.panel.animation_end()}})}),e("button.delete-employer").on("click",function(){var n=e(this).parents("li"),a=parseInt(n.attr("employer-id")),t=i,o=new AwesomeAjax;confirm("You really want to delete employer?")&&o.delete_model(n,a,t)})})}(jQuery);
var fields={gaps:{type:"group",members:["gaps","card_gaps","card_margin"],field:{type:"size",limits:[0,10]}},card_width:{type:"percent",limits:[30,100]},photo_shape:{type:"radio",values:["square","round"]},photo_size:{type:"radio",values:["a-medium","a-thumbnail","a-small","custom"]},photo_width:{type:"size",limits:[50,100]},card_colors:{type:"group",members:["card_base_color","card_border_color","card_divider_color","card_shadow_color","card_even_row_color"],field:{group:"card",type:"color"}},text_colors:{type:"group",members:["name_color","position_color","short_bio_color","contacts_color","social_color"],field:{group:"text",type:"color"}},text_transforms:{type:"group",members:["name_text_transform","position_text_transform","short_bio_text_transform"],field:{type:"radio",values:["none","uppercase"]}},font_sizes:{type:"group",members:["name_font_size","position_font_size","short_bio_font_size"],field:{type:"size",limits:[12,20]}},bolds:{type:"group",members:["name_bold","position_bold","short_bio_bold"],field:{type:"boolean"}},italics:{type:"group",members:["name_italic","position_italic","short_bio_italic"],field:{type:"boolean"}},top_margins:{type:"group",members:["photo_top_margin","name_top_margin","position_top_margin","divider_top_margin","short_bio_top_margin","contacts_top_margin","social_top_margin"],field:{type:"size",limits:[0,15]}}},rules={grid:{exclude:[]},table:{exclude:["name_color","position_color","short_bio_color","social_color"]},widget:{exclude:["photo_size"]}},AwesomeRandom=function(){var e=this;e.number=function(e){if(!(e.length>2)){var o=e[0],r=e[1];return Math.floor(Math.random()*(r-o+1)+o)}},e["boolean"]=function(){return this.number([0,1])},e.size=function(e){return this.number(e)+"px"},e.percent=function(e){return this.number(e)+"%"},e.radio=function(e){return e.length<1?void 0:e[Math.floor(Math.random()*e.length)]},e.array=function(e){return _.shuffle(e)},e.color_delta=function(e,o){var r=parseInt(e)-o<0?0:parseInt(e)-o,t=parseInt(e)+o>255?255:parseInt(e)+o;return[r,t]},e.invert_color=function(e){var o=255^e[0],r=255^e[1],t=255^e[2];return[o,r,t]},e.black_or_white=function(e){var o=.2126*e[0]+.7152*e[1]+.0722*e[2];return o>=127?[0,0,0]:[255,255,255]},e.color=function(o){var r=[];null===o?(r[0]=[0,255],r[1]=[0,255],r[2]=[0,255]):(r[0]=e.color_delta(o[0],10),r[1]=e.color_delta(o[1],10),r[2]=e.color_delta(o[2],10));var t=Math.floor(this.number(r[0])),a=Math.floor(this.number(r[1])),i=Math.floor(this.number(r[2]));return[t,a,i]}},AwesomeModel=Backbone.NestedModel.extend({make_seed:function(e){var o=new AwesomeRandom,r=this,t=(e.rules,e.seed),a=e.fields,i=e.seed_card_color;return null===i&&(i=o.color(i)),$.each(a,function(e,a){if("group"==a.type){var n={};$.each(a.members,function(e,o){n[o]=a.field}),t=r.make_seed({fields:n,seed:t,seed_card_color:i})}else{var s=null;switch(a.type){case"number":s=o.number(a.limits);break;case"boolean":s=o["boolean"]();break;case"size":s=o.size(a.limits);break;case"percent":s=o.percent(a.limits);break;case"radio":s=o.radio(a.values);break;case"array":s=o.array(a.values);break;case"color":var l=null;if("card"==a.group){l="0."+o.number([0,99]);var c=o.color(i);s="rgba("+c.join(",")+","+l+")"}if("text"==a.group){if(l="0."+o.number([50,99]),null===i)return;var _=o.black_or_white(i);s="rgba("+_.join(",")+","+l+")"}}t[e]=s}}),t},random:function(){var e={},o={fields:fields,seed:e,seed_card_color:null},r=this.make_seed(o),t=model.get("layout"),a=model.get("styles."+t);$.each(a,function(e,o){$.inArray(e,rules[t].exclude)>-1||r.hasOwnProperty(e)&&model.set("styles."+t+"."+e,r[e])})}});
var AwesomeTeam=function(){"use strict";var e=jQuery,t=this,o='<p class="hint">Notice: style settings for Skype, Phone, Email and Website are common for all these fields.</p>';t.panel=e("#a-slide-panel"),t.preview=e("#a-slide-panel .team-preview"),t.employers_panel="#panel-employers",t.layout=model.get("layout"),t.colorpickers=["button","button_hover","button_text","button_text_hover","base","card_base","card_border","divider","card_shadow","card_even_row","name","position","short_bio","contacts","social"],t.tooltips={photo:{type:"photo",hint:""},name:{type:"font",hint:""},position:{type:"font",hint:""},short_bio:{type:"font",hint:""},divider:{type:"divider",hint:""},social:{type:"social",hint:""},contacts:{type:"font",hint:o}},t.labels={grid:{name:"Card",card_divider_color:"Divider"},table:{name:"Row",card_divider_color:"Separators"},widget:{name:"Widget",card_divider_color:"Separators"}},t.show_fields=function(){var o=e.Deferred(),i=model.get("styles."+model.get("layout")+".blocks_order");return"grid"==model.get("layout")&&-1==e.inArray("body",i)&&i.push("body"),e(".team-blocks-visibility .visible").hide(),e.each(i,function(t,o){e("."+o+"_visible").show()}),i=model.get("styles."+model.get("layout")),e("#team-form .model-field").hide(),e.each(i,function(o,i){e("#team-form ."+o).show(),o in t.labels[model.get("layout")]&&e("#team-form ."+o+" .input-group-addon",t.panel).eq(0).html(t.labels[model.get("layout")][o])}),e(".interface-elements").show(),e(".interface-styling").show(),e("h5.card-label",t.panel).html(t.labels[model.get("layout")].name+" settings"),e("h5.layout-label",t.panel).show(),"grid"!=model.get("layout")&&e("h5.layout-label",t.panel).hide(),"widget"==model.get("layout")&&(e(".interface-elements").hide(),e(".interface-styling").hide()),e(".empty-model .hint").html("Add at least one employee from the main plugins' screen."),o.resolve(),o},t.insert_preview_html=function(){var e=model.get("layout"),o=model.get(e+"_html");t.preview.html(o)},t.bind_form=function(){var t=e.Deferred();return e("#a-slide-panel .team-align .btn").on("click",function(t){t.preventDefault();var o=e(this),i=o.parent(".btn-group"),l=o.find("input"),a=l.attr("data-value"),n="styles."+model.get("layout")+".align";i.find(".btn").removeClass("active"),model.set(n,a),o.addClass("active")}),e("#a-slide-panel .toggle").on("click",function(t){t.preventDefault();var o=e(this),i=o.find("input"),l=i.attr("name").split("team_").join(""),a="styles."+model.get("layout")+"."+l;i.prop("checked","checked"),1==i.attr("data-checked")?(model.set(a,"0"),i.val("0"),i.attr("data-checked","0")):(model.set(a,"1"),i.val("1"),i.attr("data-checked","1"))}),window.team_form_view=new TeamForm({model:window.model}),team_form_view.render(),t.resolve(),t},t.bind_preview=function(){var t=e.Deferred();return window.preview_view=new TeamPreview({model:window.model}),preview_view.render(),t.resolve(),t},t.init_sortable_fields=function(){var o=e.Deferred(),i="table"==model.get("layout")?"x":"y",l=t.preview.find("ul li .sortable-box");return l.sortable({axis:i,forcePlaceholderSize:!0,forceHelperSize:!0,placeholder:"preview-placeholder",helper:function(t,o){var i=e(o).clone(),l=e("<div></div>");return i.css("display","table-cell"),l.css("display","table"),l.css("vertical-align","middle"),l.append(i),l.css("margin-top",e(o).css("margin-top")),l.css("width","100%"),l},start:function(e,t){t.placeholder.height(t.helper.height()),t.placeholder.width(t.helper.width()),t.placeholder.css("margin-top",t.helper.css("margin-top"))},update:function(t,o){var i=l.find(".sortable"),a=[];e.each(i,function(){var t=e(this).attr("data-block-name");a.push(t)}),e('#a-slide-panel [name="team_blocks_order"]').val(JSON.stringify(a)),model.set("styles."+model.get("layout")+".blocks_order",a)}}),o.resolve(),o},t.set_rgba_color=function(e,t){var o="styles."+model.get("layout")+".",i=t.toRGB();t="rgba("+i.r+","+i.g+","+i.b+","+i.a+")",model.set(o+e,t)},t.init_colorpicker=function(){var o=e.Deferred();return e.each(t.colorpickers,function(o,i){var l=e("#a-slide-panel ."+i+"_color"),a="colorpicker_"+i+"_color";window[a]=l.colorpicker({container:"#a-slide-panel ."+i+"_color .color"}).on("changeColor.colorpicker",function(e){t.set_rgba_color(i+"_color",e.color)})}),o},t.bind_tooltips=function(){e("#a-slide-panel .team-photo-settings select").on("change",function(){var t=e(this).attr("data-field"),o=e(this).val();model.set("styles."+model.get("layout")+"."+t,o)}),e('#a-slide-panel .team-photo-settings [name="team_photo_size_select"]').on("change",function(){var t=e(this).val(),o=model.get("layout");e("#a-slide-panel .employer_photo img");return"grid"!=o?!1:void e('#a-slide-panel [name="team_photo_size"]').val(t)}),e("#a-slide-panel .btn-group-radio .btn").on("click",function(t){t.preventDefault();var o=e(this),i=o.parent(".btn-group"),l=o.find("input"),a=l.attr("data-value"),n=i.attr("data-field-name");n="styles."+model.get("layout")+"."+n;var r=o.attr("data-option-name");l.prop("checked","checked"),l.val(a),i.find(".btn").removeClass("active"),model.set(n+"_"+r,a),o.addClass("active")}),e("#a-slide-panel .btn-group-checkbox .btn").on("click",function(t){t.preventDefault();var o=e(this),i=o.find("input"),l=i.attr("name").split("team_").join("");l="styles."+model.get("layout")+"."+l,1==parseInt(i.val())?(model.set(l,"0"),i.val("0"),o.removeClass("active")):(model.set(l,"1"),i.val("1"),o.addClass("active"))}),e('#a-slide-panel [data-action="call-tooltip"]').on("click",function(t){t.preventDefault();var o=e(this),i=e(this).parent().attr("data-tooltip-name"),l=o.parents("#a-slide-panel"),a=l.find('[data-field="'+i+'"]');e("#a-slide-panel .a-tooltip-wrapper").css("visibility","hidden").css("opacity",0),a.css("visibility","visible").css("opacity",1)}),e(document).on("click",function(t){if(!e(t.target).parents(".a-tooltip-wrapper").length&&!e(t.target).is('[data-action="call-tooltip"]')&&!e(t.target).parents("button").is('[data-action="call-tooltip"]')){var o=e("#a-slide-panel .live-preview .a-tooltip-wrapper");o.is(":visible")&&o.css("visibility","hidden").css("opacity",0)}}),window.view_tooltip_photo=new TeamTooltipPhoto({model:window.model,el:"#a-slide-panel .photo_settings",field_name:"photo"}),view_tooltip_photo.render(),window.view_tooltip_name=new TeamTooltipFont({model:window.model,el:"#a-slide-panel .name_settings",field_name:"name"}),view_tooltip_name.render(),window.view_tooltip_position=new TeamTooltipFont({model:window.model,el:"#a-slide-panel .position_settings",field_name:"position"}),view_tooltip_position.render(),window.view_tooltip_short_bio=new TeamTooltipFont({model:window.model,el:"#a-slide-panel .short_bio_settings",field_name:"short_bio"}),view_tooltip_short_bio.render(),window.view_tooltip_contacts=new TeamTooltipFont({model:window.model,el:"#a-slide-panel .contacts_settings",field_name:"contacts"}),view_tooltip_contacts.render(),window.view_tooltip_divider=new TeamTooltipDivider({model:window.model,el:"#a-slide-panel .divider_settings",field_name:"divider"}),view_tooltip_divider.render(),window.view_tooltip_social=new TeamTooltipSocial({model:window.model,el:"#a-slide-panel .social_settings",field_name:"social"}),view_tooltip_social.render()},t.init_tooltips=function(){var o=e.Deferred();return e.each(t.tooltips,function(e,t){var o={key:e,width:t.width,viewport:".a-slide-panel",direction:"bottom",container:"#a-slide-panel #team-tooltips",content:"#team-"+t.type+"-settings",data:{field_name:e,hint:t.hint}};window[e+"_tooltip"]=new AwesomeTooltip(o),window[e+"_tooltip"].init()}),t.bind_tooltips(),o.resolve(),o},t.init_help=function(){var t=e.Deferred(),o=e("#preview-help").clone().removeAttr("id").attr("panel","preview-help").css({zIndex:4});return e("#team-form .col-md-4").append(o.addClass("at-transition")),t.resolve(),t},t.destroy_colorpickers=function(){e.each(t.colorpickers,function(e,t){var o="colorpicker_"+t+"_color";delete window[o]})},t.destroy=function(){e(".toggle").off(),e("#a-slide-panel select").dropdown("destroy"),e("#a-slide-panel #team-tooltips").html(""),preview_view.close(),team_form_view.close(),e.each(t.tooltips,function(e,t){window["view_tooltip_"+e].close()}),e.each(t.tooltips,function(e,t){window[e+"_tooltip"].destroy()})},t.reinit=function(){var e=new AwesomeForm;e.init(model.attributes),t.show_fields(),t.bind_preview(),t.init_sortable_fields()},t.init=function(){var o=new AwesomeForm,i=o.init(model.attributes),l=t.show_fields(),a=t.bind_form(),n=t.bind_preview(),r=t.init_tooltips(),d=t.init_sortable_fields(),s=e.Deferred();return e.when(i,l,a,n,r,d).then(function(){t.init_colorpicker(),e("#a-slide-panel select").dropdown(),s.resolve()}),s}};
var TeamForm=Backbone.View.extend({el:"#a-slide-panel #team-form",bindings:function(){var e={},t=model.get("layout");return e['[name="team_name"]']="name",e['[name="team_title"]']="title",e['[name="team_description"]']="description",e['[name="team_custom_css"]']="custom_css",e['[name="team_employers"]']="employers_ids",e['[name="team_slider"]']={observe:"styles."+t+".slider",update:function(e,a,s,_){"1"==a&&($('#a-slide-panel [name="team_filter"]').attr("data-checked","0"),s.set("styles."+t+".filter","0"),e.val("1"),e.attr("data-checked","1"))}},e['[name="team_filter"]']={observe:"styles."+t+".filter",update:function(e,a,s,_){"1"==a&&($('#a-slide-panel [name="team_slider"]').attr("data-checked","0"),s.set("styles."+t+".slider","0"),e.val("1"),e.attr("data-checked","1"))}},e['[name="team_button_color"]']="styles."+t+".button_color",e['[name="team_button_hover_color"]']="styles."+t+".button_hover_color",e['[name="team_button_text_color"]']="styles."+t+".button_text_color",e['[name="team_button_text_hover_color"]']="styles."+t+".button_text_hover_color",e['[name="team_filter_font_size"]']="styles."+t+".filter_font_size",e['[name="team_filter_bold"]']="styles."+t+".filter_bold",e['[name="team_filter_italic"]']="styles."+t+".filter_italic",e['[name="team_filter_text_transform"]']="styles."+t+".filter_text_transform",e['[name="team_reveal"]']="styles."+t+".reveal",e['[name="team_hover"]']="styles."+t+".hover",e['[name="team_card_width"]']="styles."+t+".card_width",e['[name="team_gaps"]']="styles."+t+".gaps",e['[name="team_card_gaps"]']="styles."+t+".card_gaps",e['[name="team_card_margin"]']="styles."+t+".card_margin",e['[name="team_align"]']="styles."+t+".align",e['[name="team_base_color"]']="styles."+t+".base_color",e['[name="team_card_base_color"]']="styles."+t+".card_base_color",e['[name="team_card_border_color"]']="styles."+t+".card_border_color",e['[name="team_card_shadow_color"]']="styles."+t+".card_shadow_color",e['[name="team_card_even_row_color"]']="styles."+t+".card_even_row_color",e['[name="team_photo_visible"]']="styles."+t+".photo_visible",e['[name="team_name_visible"]']="styles."+t+".name_visible",e['[name="team_position_visible"]']="styles."+t+".position_visible",e['[name="team_short_bio_visible"]']="styles."+t+".short_bio_visible",e['[name="team_body_visible"]']="styles."+t+".body_visible",e},render:function(){return this.stickit(),this},close:function(){this.unstickit()}});
var toggle_visibility=function(t,o,s,e){t.toggle(!!+o)},photo_settings=function(t,o,s,e){var i=s.get("layout"),a=$(".photo_width"),n=$(".photo_top_margin"),c={"a-full":"100%"};toggle_visibility(t,o[0],s,e);var r=t.find(".photo-wrapper"),l=t.find(".photo-container");a.hide(),"grid"==i&&("round"==o[1]&&r.css("border-radius","50%"),"square"==o[1]&&r.css("border-radius","0"),"a-full"==o[2]&&(t.css("margin","0"),r.css("width",c[o[2]]),l.css("width",c[o[2]]),l.css("padding-bottom",c[o[2]]),n.hide()),"custom"==o[2]&&(t.css("margin-top",calc_size(o[4])),r.css("width",calc_size(o[3])),a.show(),n.show())),"table"==i&&("round"==o[1]&&r.css("border-radius","50%"),"square"==o[1]&&r.css("border-radius","0"),t.css("width",calc_size(o[3])),r.css("width",calc_size(o[3])),l.css("width",calc_size(o[3])),l.css("padding-bottom",calc_size(o[3])),a.show()),"widget"==i&&("round"==o[1]&&r.css("border-radius","50%"),"square"==o[1]&&r.css("border-radius","0"),r.css("width",calc_size(o[3])),r.css("min-width",calc_size(o[3])),l.css("width",calc_size(o[3])),l.css("padding-bottom",calc_size(o[3])),a.show())},font_settings=function(t,o,s,e){e.selector.replace_all(".employer_","")+"_color";toggle_visibility(t,o[0],s,e);var i=t.find(".team-field-content");i.css("font-weight","normal"),i.css("font-style","normal"),t.find(".font-style .btn").removeClass("active"),i.css("font-size",o[1]),i.css("color",o[2]),+o[3]&&(t.find('[data-option-name="bold"]').addClass("active"),i.css("font-weight","bold")),+o[4]&&(t.find('[data-option-name="italic"]').addClass("active"),i.css("font-style","italic")),i.css("text-transform",o[5]),i.css("text-align",o[6]),t.css("margin-top",calc_size(o[7]))},card_body_settings=function(t,o,s,e){t.css("background-color",o),t.css("border","1px solid "+s),""!==e&&(t.css("-webkit-box-shadow","0 0 5px 0 "+e),t.css("-moz-box-shadow","0 0 5px 0 "+e),t.css("box-shadow","0 0 5px 0 "+e))},TeamPreview=Backbone.View.extend({el:"#a-slide-panel #team-form",initialize:function(t){_.bindAll(this,"before_render","render","after_render");var o=this;this.render=_.wrap(this.render,function(t){return o.before_render(),t(),o.after_render(),o})},bindings:function(){var t={},o=model.get("layout"),s="styles."+o+".";return t["#team-preview"]={observe:[s+"card_width"],update:function(t,o,s,e){"grid"==s.get("layout")&&t.find("ul > li").css("width","239px")}},t["#team-preview .ats-layout"]={observe:s+"hover",update:function(t,o,s,e){"off"==o?t.attr("class","ats-layout-"+s.get("layout")+" ats-layout "):t.attr("class","ats-layout-"+s.get("layout")+" ats-layout ats-effect-"+o)}},t["#team-preview ul"]={observe:[s+"gaps",s+"base_color",s+"align"],update:function(t,o,s,e){"grid"==s.get("layout")&&(t.css("background-color",o[1]),t.css("text-align",o[2]))}},t["#team-preview ul li"]={observe:[s+"card_margin"],update:function(t,o,s,e){}},t["#team-preview ul li > div"]={observe:[s+"card_base_color",s+"card_border_color",s+"card_shadow_color",s+"card_gaps",s+"body_visible"],update:function(t,o,s,e){t.css("padding","0"),"grid"==s.get("layout")?(+o[4]?card_body_settings(t,o[0],o[1],o[2]):(t.css("background-color","transparent"),t.css("border","none"),t.css("-webkit-box-shadow","none"),t.css("-moz-box-shadow","none"),t.css("box-shadow","none")),"a-full"==s.get("styles.grid.photo_size")&&t.css("padding","0")):(t.css("border-top-color",o[1]),t.css("border-bottom-color",o[1]))}},t[".employer_divider"]={observe:[s+"divider_visible",s+"divider_color",s+"divider_width",s+"divider_top_margin"],update:function(t,o,s,e){"grid"==s.get("layout")&&(toggle_visibility(t,o[0],s,e),t.find("span").css("background-color",o[1]),t.find("span").css("width",calc_size(o[2])),t.css("margin-top",calc_size(o[3])))}},t[".card_margin"]={observe:s+"slider",update:function(t,o,s,e){t.hide(),0===o&&"grid"==s.get("layout")&&t.show()}},t[".team-align"]={observe:s+"align",update:function(t,o,s,e){t.find(".btn").removeClass("active"),t.find(".align-"+o).addClass("active")}},t[".employer_photo"]={observe:[s+"photo_visible",s+"photo_shape",s+"photo_size",s+"photo_width",s+"photo_top_margin"],update:photo_settings},t[".employer_name"]={observe:[s+"name_visible",s+"name_font_size",s+"name_color",s+"name_bold",s+"name_italic",s+"name_text_transform",s+"name_align",s+"name_top_margin"],update:font_settings},t[".employer_position"]={observe:[s+"position_visible",s+"position_font_size",s+"position_color",s+"position_bold",s+"position_italic",s+"position_text_transform",s+"position_align",s+"position_top_margin"],update:font_settings},t[".employer_short_bio"]={observe:[s+"short_bio_visible",s+"short_bio_font_size",s+"short_bio_color",s+"short_bio_bold",s+"short_bio_italic",s+"short_bio_text_transform",s+"short_bio_align",s+"short_bio_top_margin"],update:font_settings},t[".employer_phone"]={observe:[s+"phone_visible",s+"contacts_font_size",s+"contacts_color",s+"contacts_bold",s+"contacts_italic",s+"contacts_text_transform",s+"contacts_align",s+"contacts_top_margin"],update:font_settings},t[".employer_email"]={observe:[s+"email_visible",s+"contacts_font_size",s+"contacts_color",s+"contacts_bold",s+"contacts_italic",s+"contacts_text_transform",s+"contacts_align",s+"contacts_top_margin"],update:font_settings},t[".employer_skype"]={observe:[s+"skype_visible",s+"contacts_font_size",s+"contacts_color",s+"contacts_bold",s+"contacts_italic",s+"contacts_text_transform",s+"contacts_align",s+"contacts_top_margin"],update:font_settings},t[".employer_link"]={observe:[s+"link_visible",s+"contacts_font_size",s+"contacts_color",s+"contacts_bold",s+"contacts_italic",s+"contacts_text_transform",s+"contacts_align",s+"contacts_top_margin"],update:font_settings},t[".employer_social"]={observe:[s+"social_visible",s+"social_color",s+"social_size",s+"social_top_margin",s+"social_align"],update:function(t,o,s,e){toggle_visibility(t,o[0],s,e),t.css("color",o[1]),t.css("color",o[1]),t.css("font-size",o[2]),t.css("margin-top",calc_size(o[3])),t.css("text-align",o[4])}},t},before_render:function(){var t='<button data-action="call-tooltip">            <svg class="icon" viewBox="0 0 28 28">            <use xlink:href="#icon-pen"></use>            </svg>            </button>';this.$el.find("#team-preview .grid-container").append(t)},render:function(){return preview.insert_preview_html(),this.stickit(),this},after_render:function(){},close:function(){this.unstickit()}});
var $=jQuery,TeamTooltipPhoto=Backbone.View.extend({initialize:function(e){var i=model.get("layout");this.options=e,_.bindAll(this,"bindings");var t="styles."+i+".";$('#a-slide-panel [name="team_'+this.options.field_name+'_size_select"]').val(model.get(t+"photo_size")).dropdown("update"),"a-full"==model.get(t+"photo_size")&&($("#a-slide-panel ."+this.options.field_name+"_width").hide(),$("#a-slide-panel ."+this.options.field_name+"_top_margin").hide())},bindings:function(){var e=model.get("layout"),i={},t=this.options.field_name,n="styles."+e+"."+t;return i['[name="team_'+t+'_shape"]']=n+"_shape",i['[name="team_'+t+'_size"]']=n+"_size",i['[name="team_'+t+'_width"]']=n+"_width",i['[name="team_'+t+'_top_margin"]']=n+"_top_margin",i[".btn-group-photo-shape"]={observe:n+"_shape",update:function(e,i,t,n){e.find(".btn").removeClass("active"),e.find("input").val(i),e.find("."+this.options.field_name+"_shape_"+i).addClass("active")}},i},render:function(){return this.stickit(),this},close:function(){this.unstickit()}});
var TeamTooltipFont=Backbone.View.extend({initialize:function(t){this.options=t,_.bindAll(this,"bindings")},bindings:function(){var t={},n=model.get("layout"),i=this.options.field_name,e="styles."+n+"."+i;return t['[name="team_'+i+'_font_size"]']=e+"_font_size",t['[name="team_'+i+'_color"]']=e+"_color",t['[name="team_'+i+'_bold"]']=e+"_bold",t['[name="team_'+i+'_italic"]']=e+"_italic",t['[name="team_'+i+'_text_transform"]']=e+"_text_transform",t['[name="team_'+i+'_align"]']=e+"_align",t['[name="team_'+i+'_top_margin"]']=e+"_top_margin",t[".btn-group-align"]={observe:e+"_align",update:function(t,n,i,e){t.find(".btn").removeClass("active"),t.find("input").val(n),t.find("."+this.options.field_name+"_align_"+n).addClass("active")}},t[".btn-bold"]={observe:e+"_bold",update:function(t,n,i,e){t.find(".btn").removeClass("active"),+n&&t.addClass("active")}},t[".btn-italic"]={observe:e+"_italic",update:function(t,n,i,e){t.find(".btn").removeClass("active"),+n&&t.addClass("active")}},t[".btn-group-text-transform"]={observe:e+"_text_transform",update:function(t,n,i,e){t.find(".btn").removeClass("active"),t.find("input").val(n),t.find("."+this.options.field_name+"_text_transform_"+n).addClass("active")}},t},render:function(){return this.stickit(),this},close:function(){this.unstickit()}});
var $=jQuery,TeamTooltipDivider=Backbone.View.extend({initialize:function(i){model.get("layout");this.options=i,_.bindAll(this,"bindings")},bindings:function(){var i=model.get("layout"),t={},n=this.options.field_name,e="styles."+i+"."+n;return t['[name="team_'+n+'_color"]']=e+"_color",t['[name="team_'+n+'_width"]']=e+"_width",t['[name="team_'+n+'_top_margin"]']=e+"_top_margin",t},render:function(){return this.stickit(),this},close:function(){this.unstickit()}});
var $=jQuery,TeamTooltipSocial=Backbone.View.extend({initialize:function(i){model.get("layout");this.options=i,_.bindAll(this,"bindings")},bindings:function(){var i=model.get("layout"),n={},t=this.options.field_name,e="styles."+i+"."+t;return n['[name="team_'+t+'_color"]']=e+"_color",n['[name="team_'+t+'_size"]']=e+"_size",n['[name="team_'+t+'_align"]']=e+"_align",n['[name="team_'+t+'_top_margin"]']=e+"_top_margin",n[".btn-group-align"]={observe:e+"_align",update:function(i,n,t,e){i.find(".btn").removeClass("active"),i.find("input").val(n),i.find("."+this.options.field_name+"_align_"+n).addClass("active")}},n},render:function(){return this.stickit(),this},close:function(){this.unstickit()}});
var file_frame,AwesomeEmployer=function(){"use strict";var e=jQuery,i=this;i.panel=e("#a-slide-panel"),i.bind_form=function(){var o=e.Deferred();e(document).on("click",'[data-action="upload_photo"]',function(o){o.preventDefault();var t,r;return void 0!==file_frame?void file_frame.open():(file_frame=wp.media.frames.file_frame=wp.media({frame:"post",state:"insert",multiple:!1}),file_frame.on("insert",function(){var o=e(this).parents(".foto-upload");if(t=file_frame.state().get("selection").first().toJSON(),!(0>e.trim(t.url.length))){r=t.sizes.thumbnail?t.sizes.thumbnail.url:t.url;var n=e('<img src="'+r+'"/>');o.find('[name="employer_thumbnail_id"]').val(t.id),model.set("thumbnail_id",t.id),i.panel.find(".foto-wrapper").html("").append(n),e("#a-slide-panel #employer-form-foto-remove").show(),file_frame.close()}}),file_frame.open(),!1)}),e(document).on("click",'[data-action="remove_photo"]',function(i){i.preventDefault();var o=e(this).parents("form");o.find('[name="employer_thumbnail_id"]').val(""),o.find("#employer-form-foto").html(""),window.model.set("thumbnail_id",""),e(this).hide()});var t=new EmployerForm({model:window.model});return t.render(),o.resolve(),o},i.destroy=function(){},i.init=function(){i.bind_form();var e=new AwesomeForm;e.init(model.attributes)}};
var EmployerForm=Backbone.View.extend({el:"#a-slide-panel #employer-form",bindings:function(){var e={};return e['[name="employer_thumbnail_id"]']="thumbnail_id",e['[name="employer_name"]']="name",e['[name="employer_position"]']="position",e['[name="employer_department"]']="department",e['[name="employer_short_bio"]']="short_bio",e['[name="employer_email"]']="email",e['[name="employer_phone"]']="phone",e['[name="employer_skype"]']="skype",e['[name="employer_link"]']="link",e['[name="employer_profile"]']="profile",e['[name="employer_facebook"]']="facebook",e['[name="employer_twitter"]']="twitter",e['[name="employer_linkedin"]']="linkedin",e},render:function(){return this.stickit(),this}});
//# sourceMappingURL=data:application/json;base64,